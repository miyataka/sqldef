// Code generated by goyacc -o parser/parser.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser/parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	defaultValueOrExpression DefaultValueOrExpression
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const ANY = 57364
const SOME = 57365
const DISTINCT = 57366
const AS = 57367
const EXISTS = 57368
const ASC = 57369
const DESC = 57370
const INTO = 57371
const DUPLICATE = 57372
const DEFAULT = 57373
const SRID = 57374
const SET = 57375
const LOCK = 57376
const KEYS = 57377
const ROWID = 57378
const STRICT = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const UNICODE_STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const MAX = 57416
const OR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const POSIX_REGEX = 57434
const POSIX_REGEX_CI = 57435
const POSIX_NOT_REGEX = 57436
const POSIX_NOT_REGEX_CI = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const MATERIALIZED = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const PRIMARY = 57463
const COLUMN = 57464
const CONSTRAINT = 57465
const REFERENCES = 57466
const SPATIAL = 57467
const FULLTEXT = 57468
const FOREIGN = 57469
const KEY_BLOCK_SIZE = 57470
const POLICY = 57471
const WHILE = 57472
const UNIQUE = 57473
const KEY = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const TYPE = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const INSTEAD = 57522
const OF = 57523
const DEFERRABLE = 57524
const INITIALLY = 57525
const IMMEDIATE = 57526
const DEFERRED = 57527
const CONCURRENTLY = 57528
const SQL = 57529
const SECURITY = 57530
const BEGIN = 57531
const START = 57532
const TRANSACTION = 57533
const COMMIT = 57534
const ROLLBACK = 57535
const BIT = 57536
const TINYINT = 57537
const SMALLINT = 57538
const SMALLSERIAL = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const SERIAL = 57543
const BIGINT = 57544
const BIGSERIAL = 57545
const INTNUM = 57546
const REAL = 57547
const DOUBLE = 57548
const PRECISION = 57549
const FLOAT_TYPE = 57550
const DECIMAL = 57551
const NUMERIC = 57552
const SMALLMONEY = 57553
const MONEY = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const DATETIMEOFFSET = 57559
const DATETIME2 = 57560
const SMALLDATETIME = 57561
const CHAR = 57562
const VARCHAR = 57563
const VARYING = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NTEXT = 57570
const UUID = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const CITEXT = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const JSONB = 57582
const ENUM = 57583
const GEOMETRY = 57584
const POINT = 57585
const LINESTRING = 57586
const POLYGON = 57587
const GEOMETRYCOLLECTION = 57588
const MULTIPOINT = 57589
const MULTILINESTRING = 57590
const MULTIPOLYGON = 57591
const VARIADIC = 57592
const ARRAY = 57593
const NOW = 57594
const GETDATE = 57595
const BPCHAR = 57596
const TEXT_PATTERN_OPS = 57597
const NULLX = 57598
const AUTO_INCREMENT = 57599
const APPROXNUM = 57600
const SIGNED = 57601
const UNSIGNED = 57602
const ZEROFILL = 57603
const ZONE = 57604
const AUTOINCREMENT = 57605
const DATABASES = 57606
const TABLES = 57607
const VSCHEMA_TABLES = 57608
const EXTENDED = 57609
const FULL = 57610
const PROCESSLIST = 57611
const NAMES = 57612
const CHARSET = 57613
const GLOBAL = 57614
const SESSION = 57615
const ISOLATION = 57616
const LEVEL = 57617
const READ = 57618
const WRITE = 57619
const ONLY = 57620
const REPEATABLE = 57621
const COMMITTED = 57622
const UNCOMMITTED = 57623
const SERIALIZABLE = 57624
const NEW = 57625
const CONCAT_NULL_YIELDS_NULL = 57626
const CURSOR_CLOSE_ON_COMMIT = 57627
const QUOTED_IDENTIFIER = 57628
const ARITHABORT = 57629
const FMTONLY = 57630
const NOCOUNT = 57631
const NOEXEC = 57632
const NUMERIC_ROUNDABORT = 57633
const ANSI_DEFAULTS = 57634
const ANSI_NULL_DFLT_OFF = 57635
const ANSI_NULL_DFLT_ON = 57636
const ANSI_NULLS = 57637
const ANSI_PADDING = 57638
const ANSI_WARNINGS = 57639
const FORCEPLAN = 57640
const SHOWPLAN_ALL = 57641
const SHOWPLAN_TEXT = 57642
const SHOWPLAN_XML = 57643
const IMPLICIT_TRANSACTIONS = 57644
const REMOTE_PROC_TRANSACTIONS = 57645
const XACT_ABORT = 57646
const CURRENT_TIMESTAMP = 57647
const DATABASE = 57648
const CURRENT_DATE = 57649
const CURRENT_TIME = 57650
const LOCALTIME = 57651
const LOCALTIMESTAMP = 57652
const UTC_DATE = 57653
const UTC_TIME = 57654
const UTC_TIMESTAMP = 57655
const REPLACE = 57656
const CONVERT = 57657
const CAST = 57658
const SUBSTR = 57659
const SUBSTRING = 57660
const GROUP_CONCAT = 57661
const SEPARATOR = 57662
const INHERIT = 57663
const LEAD = 57664
const LAG = 57665
const MATCH = 57666
const AGAINST = 57667
const BOOLEAN = 57668
const LANGUAGE = 57669
const WITH = 57670
const WITHOUT = 57671
const PARSER = 57672
const QUERY = 57673
const EXPANSION = 57674
const UNUSED = 57675
const VIRTUAL = 57676
const STORED = 57677
const GENERATED = 57678
const ALWAYS = 57679
const IDENTITY = 57680
const SEQUENCE = 57681
const INCREMENT = 57682
const MINVALUE = 57683
const CACHE = 57684
const CYCLE = 57685
const OWNED = 57686
const NONE = 57687
const CLUSTERED = 57688
const NONCLUSTERED = 57689
const REPLICATION = 57690
const COLUMNSTORE = 57691
const INCLUDE = 57692
const HOLDLOCK = 57693
const NOLOCK = 57694
const NOWAIT = 57695
const PAGLOCK = 57696
const ROWLOCK = 57697
const TABLELOCK = 57698
const DEFINER = 57699
const INVOKER = 57700
const TYPECAST = 57701
const CHECK = 57702
const OVER = 57703

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"ANY",
	"SOME",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"INSTEAD",
	"OF",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CONCAT_NULL_YIELDS_NULL",
	"CURSOR_CLOSE_ON_COMMIT",
	"QUOTED_IDENTIFIER",
	"ARITHABORT",
	"FMTONLY",
	"NOCOUNT",
	"NOEXEC",
	"NUMERIC_ROUNDABORT",
	"ANSI_DEFAULTS",
	"ANSI_NULL_DFLT_OFF",
	"ANSI_NULL_DFLT_ON",
	"ANSI_NULLS",
	"ANSI_PADDING",
	"ANSI_WARNINGS",
	"FORCEPLAN",
	"SHOWPLAN_ALL",
	"SHOWPLAN_TEXT",
	"SHOWPLAN_XML",
	"IMPLICIT_TRANSACTIONS",
	"REMOTE_PROC_TRANSACTIONS",
	"XACT_ABORT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	132, 396,
	-2, 145,
	-1, 398,
	61, 366,
	-2, 363,
	-1, 426,
	121, 789,
	-2, 236,
	-1, 446,
	121, 788,
	-2, 783,
	-1, 541,
	121, 789,
	-2, 236,
	-1, 563,
	268, 798,
	-2, 696,
	-1, 611,
	268, 798,
	-2, 436,
	-1, 643,
	5, 35,
	-2, 13,
	-1, 649,
	5, 35,
	-2, 15,
	-1, 784,
	268, 798,
	-2, 436,
	-1, 937,
	121, 791,
	-2, 787,
	-1, 947,
	268, 798,
	-2, 305,
	-1, 1024,
	268, 798,
	-2, 436,
	-1, 1083,
	60, 97,
	-2, 194,
	-1, 1086,
	60, 97,
	-2, 194,
	-1, 1140,
	5, 36,
	-2, 565,
	-1, 1216,
	5, 35,
	-2, 14,
	-1, 1269,
	60, 97,
	-2, 165,
	-1, 1401,
	88, 785,
	-2, 773,
	-1, 1490,
	57, 49,
	59, 49,
	-2, 51,
	-1, 1656,
	5, 35,
	-2, 744,
	-1, 1681,
	5, 35,
	-2, 58,
	-1, 1752,
	5, 36,
	-2, 745,
	-1, 1782,
	5, 35,
	-2, 747,
	-1, 1804,
	5, 36,
	-2, 748,
}

const yyPrivate = 57344

const yyLast = 9098

var yyAct = [...]int16{
	543, 524, 1585, 1761, 1710, 1603, 1711, 553, 1674, 1513,
	1707, 747, 30, 1647, 1036, 1586, 656, 39, 40, 1679,
	1525, 1526, 1373, 1515, 1398, 1666, 999, 834, 746, 460,
	1200, 63, 63, 63, 1395, 125, 128, 1511, 1572, 1500,
	1055, 1381, 1578, 861, 1232, 57, 1392, 638, 1052, 1378,
	1229, 1382, 1094, 1205, 1210, 1136, 30, 1066, 26, 390,
	849, 873, 678, 946, 1130, 1032, 602, 1268, 980, 517,
	56, 222, 204, 888, 535, 387, 936, 637, 901, 551,
	188, 58, 983, 1017, 64, 774, 807, 59, 236, 1374,
	522, 1285, 811, 1189, 399, 523, 838, 393, 43, 503,
	153, 423, 123, 124, 133, 425, 237, 171, 47, 431,
	449, 706, 707, 708, 709, 710, 711, 712, 705, 190,
	934, 1308, 996, 1575, 510, 9, 148, 43, 228, 1190,
	1482, 705, 186, 43, 511, 603, 33, 715, 1033, 32,
	586, 63, 232, 233, 49, 129, 765, 131, 384, 684,
	206, 207, 208, 209, 589, 142, 400, 401, 50, 51,
	394, 44, 1806, 45, 33, 1462, 31, 646, 1742, 1079,
	1069, 1068, 382, 411, 1802, 421, 646, 183, 1079, 1069,
	1068, 1070, 1699, 186, 187, 1099, 244, 442, 1675, 793,
	1070, 1795, 224, 646, 1071, 1079, 1069, 1068, 1335, 1336,
	1004, 1005, 150, 1071, 1090, 1368, 43, 1070, 174, 43,
	1133, 43, 43, 1455, 43, 472, 473, 247, 245, 1741,
	1071, 246, 43, 181, 1324, 169, 43, 479, 1119, 1448,
	52, 189, 170, 397, 1098, 167, 464, 465, 466, 467,
	415, 160, 1698, 159, 492, 163, 164, 166, 1794, 1733,
	1734, 161, 168, 44, 1732, 45, 646, 1625, 1079, 1069,
	1068, 435, 43, 1527, 439, 1528, 445, 1613, 453, 1432,
	1070, 455, 824, 458, 459, 646, 823, 1079, 1069, 1068,
	451, 1685, 433, 1071, 1684, 1614, 1615, 1686, 192, 1070,
	177, 741, 172, 182, 205, 858, 993, 446, 1077, 45,
	179, 178, 1071, 831, 398, 43, 197, 1077, 1076, 43,
	708, 709, 710, 711, 712, 705, 436, 1076, 438, 437,
	1387, 168, 1306, 194, 1077, 1762, 1763, 1764, 1765, 1766,
	1767, 220, 630, 1152, 1076, 1318, 629, 1622, 1150, 42,
	471, 468, 1737, 1626, 1414, 217, 491, 1220, 130, 1629,
	1630, 1072, 1073, 1075, 36, 400, 401, 1074, 1692, 1691,
	1072, 1073, 1075, 512, 490, 1461, 1074, 1463, 143, 242,
	1521, 1627, 1219, 135, 145, 879, 1545, 1072, 1073, 1075,
	715, 384, 527, 1074, 126, 505, 1542, 1077, 1051, 33,
	504, 135, 1579, 715, 652, 653, 889, 1076, 663, 856,
	1516, 1779, 1279, 835, 495, 500, 1077, 686, 166, 588,
	134, 167, 497, 1551, 509, 664, 1076, 646, 1258, 1079,
	1069, 1068, 685, 1330, 37, 442, 175, 414, 168, 413,
	408, 1070, 176, 395, 1736, 666, 44, 502, 1518, 166,
	1072, 1073, 1075, 1307, 1071, 33, 1074, 227, 695, 1093,
	230, 715, 234, 235, 165, 241, 33, 48, 27, 1072,
	1073, 1075, 1564, 376, 221, 1074, 842, 379, 713, 714,
	706, 707, 708, 709, 710, 711, 712, 705, 591, 496,
	162, 640, 554, 616, 484, 618, 794, 146, 621, 622,
	513, 657, 1080, 1454, 661, 1544, 665, 604, 33, 435,
	384, 1080, 585, 417, 445, 184, 587, 185, 501, 1091,
	1092, 149, 643, 420, 649, 205, 504, 676, 1080, 590,
	433, 681, 592, 1099, 669, 38, 599, 617, 1337, 180,
	601, 127, 1697, 658, 1514, 400, 401, 676, 136, 137,
	1623, 644, 406, 644, 505, 1678, 478, 1466, 1077, 1623,
	482, 138, 1677, 470, 474, 639, 136, 137, 1076, 1676,
	445, 43, 35, 690, 34, 476, 1738, 53, 43, 138,
	683, 1259, 1260, 1261, 41, 444, 443, 715, 1604, 1606,
	659, 1080, 703, 713, 714, 706, 707, 708, 709, 710,
	711, 712, 705, 648, 46, 657, 655, 660, 498, 667,
	1080, 1072, 1073, 1075, 63, 378, 687, 1074, 742, 6,
	7, 791, 644, 167, 1799, 384, 396, 1755, 404, 405,
	691, 731, 732, 810, 1645, 1530, 1341, 1347, 1172, 1623,
	168, 1138, 1021, 745, 744, 640, 828, 614, 1343, 818,
	141, 624, 1358, 657, 694, 402, 1687, 819, 1624, 802,
	692, 789, 462, 461, 908, 32, 679, 680, 682, 833,
	1605, 1664, 779, 855, 1529, 780, 694, 857, 906, 907,
	905, 1160, 693, 692, 504, 1338, 840, 1018, 1088, 1413,
	33, 787, 1086, 693, 692, 1110, 588, 1109, 1108, 694,
	504, 814, 814, 814, 1107, 1106, 433, 1105, 625, 820,
	694, 822, 797, 874, 875, 644, 902, 1085, 1104, 639,
	1102, 1688, 827, 33, 445, 1020, 43, 767, 768, 769,
	770, 771, 772, 773, 693, 692, 1084, 1652, 43, 1326,
	693, 692, 931, 931, 809, 815, 817, 886, 876, 715,
	933, 694, 1080, 880, 1360, 384, 384, 694, 1689, 852,
	693, 692, 1053, 984, 693, 692, 695, 1328, 1144, 878,
	1143, 986, 985, 984, 392, 1169, 816, 694, 881, 935,
	938, 694, 144, 872, 693, 692, 1183, 139, 942, 693,
	692, 883, 403, 882, 877, 1359, 391, 1215, 644, 1000,
	1484, 694, 392, 904, 693, 692, 694, 924, 1286, 198,
	927, 926, 641, 780, 693, 692, 1563, 644, 392, 654,
	392, 694, 1286, 1019, 410, 1405, 1562, 1019, 1287, 1460,
	937, 694, 929, 932, 246, 1339, 1340, 1342, 1344, 1345,
	814, 814, 1287, 640, 814, 814, 814, 893, 895, 896,
	987, 792, 1456, 1000, 894, 457, 33, 977, 978, 456,
	1025, 1054, 1026, 1459, 715, 1083, 1120, 1121, 1122, 693,
	692, 1516, 805, 814, 814, 814, 814, 452, 409, 1050,
	1458, 995, 201, 943, 944, 203, 694, 804, 646, 979,
	1288, 403, 452, 1010, 44, 504, 45, 1445, 814, 1534,
	1284, 1457, 452, 1008, 1040, 826, 825, 44, 593, 1518,
	598, 1560, 1488, 1096, 729, 477, 994, 639, 997, 998,
	1034, 475, 445, 902, 448, 403, 446, 605, 45, 33,
	743, 1533, 1082, 1137, 743, 611, 612, 613, 695, 32,
	403, 1012, 1115, 44, 44, 45, 45, 1642, 44, 1103,
	45, 1056, 704, 703, 713, 714, 706, 707, 708, 709,
	710, 711, 712, 705, 33, 821, 31, 829, 44, 1314,
	1518, 1315, 469, 1443, 695, 416, 647, 1100, 647, 841,
	928, 704, 703, 713, 714, 706, 707, 708, 709, 710,
	711, 712, 705, 33, 1126, 1020, 623, 33, 544, 930,
	542, 546, 547, 548, 549, 688, 584, 742, 545, 550,
	850, 695, 695, 728, 730, 1789, 1788, 704, 703, 713,
	714, 706, 707, 708, 709, 710, 711, 712, 705, 1019,
	850, 1787, 384, 1149, 1179, 1775, 611, 1731, 695, 1573,
	1377, 640, 504, 1153, 1754, 695, 1201, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 935, 760, 583, 762,
	763, 764, 766, 766, 766, 766, 766, 766, 766, 766,
	814, 783, 784, 785, 786, 1168, 1204, 1212, 1173, 514,
	1213, 1228, 407, 1254, 1255, 1256, 1181, 1663, 1216, 1199,
	44, 903, 45, 1497, 1269, 1083, 1083, 1269, 1083, 1083,
	504, 504, 1350, 814, 1223, 1197, 1280, 937, 1193, 644,
	1283, 246, 1191, 1166, 814, 639, 1188, 644, 1198, 1267,
	445, 1196, 1494, 1214, 1000, 504, 1194, 1195, 1502, 1505,
	1506, 1507, 1503, 611, 1504, 1508, 646, 1203, 1667, 1668,
	647, 1186, 835, 1179, 1700, 673, 1633, 1275, 1276, 384,
	1296, 1573, 1282, 1497, 695, 1222, 1262, 1265, 673, 1547,
	673, 1546, 1270, 1271, 1272, 1273, 1274, 123, 1495, 646,
	1493, 43, 1297, 1310, 1224, 1225, 1226, 1708, 1230, 516,
	1663, 1301, 1185, 384, 1294, 1295, 1704, 695, 403, 835,
	1331, 33, 1164, 1118, 1643, 595, 1654, 850, 1473, 1013,
	1299, 1655, 1302, 1029, 1325, 673, 1428, 1329, 1289, 1290,
	1291, 1292, 1293, 657, 1309, 1179, 1427, 1311, 1424, 1423,
	1028, 403, 1582, 647, 1493, 715, 673, 1418, 1027, 1354,
	1317, 673, 1417, 1013, 1319, 1496, 803, 1363, 1349, 63,
	1163, 384, 749, 673, 1351, 673, 1298, 1009, 1375, 1013,
	695, 1179, 1178, 851, 715, 673, 1117, 1162, 937, 850,
	1035, 1497, 246, 940, 695, 850, 1003, 646, 1406, 1079,
	1069, 1068, 673, 887, 1380, 673, 672, 633, 632, 1355,
	1269, 1070, 1001, 1362, 1390, 627, 628, 489, 504, 504,
	715, 627, 626, 1376, 1071, 696, 55, 54, 903, 1218,
	1081, 1179, 646, 489, 1663, 1161, 1366, 830, 806, 799,
	796, 1024, 620, 619, 615, 43, 43, 1303, 488, 1371,
	646, 489, 1750, 940, 1497, 1612, 1522, 1388, 1361, 1041,
	519, 748, 1013, 1404, 1781, 1419, 1420, 1415, 1145, 850,
	759, 704, 703, 713, 714, 706, 707, 708, 709, 710,
	711, 712, 705, 673, 403, 1708, 795, 631, 384, 635,
	634, 403, 1411, 1430, 1425, 1426, 1726, 1724, 1695, 1561,
	790, 194, 403, 1421, 1433, 1667, 1668, 939, 941, 1278,
	1277, 1202, 1310, 223, 1467, 1114, 1113, 1089, 812, 1031,
	1030, 1470, 1007, 989, 990, 991, 1474, 992, 1077, 1520,
	884, 854, 832, 788, 384, 689, 1452, 1453, 1076, 642,
	610, 1532, 1266, 609, 607, 1472, 1451, 594, 515, 1475,
	43, 1002, 480, 1300, 218, 422, 1479, 1480, 1024, 418,
	389, 211, 504, 1549, 225, 226, 493, 1491, 1011, 1486,
	1014, 1015, 210, 199, 11, 1538, 1022, 1540, 1023, 1519,
	1523, 1072, 1073, 1075, 644, 814, 1087, 1074, 1095, 1670,
	1536, 1182, 636, 481, 1539, 885, 43, 43, 29, 890,
	891, 1048, 1483, 1485, 1541, 229, 43, 1517, 1550, 1548,
	1502, 1505, 1506, 1507, 1503, 132, 1504, 1508, 1597, 1595,
	1673, 1672, 1553, 1598, 1596, 1594, 1593, 1599, 1481, 1506,
	1507, 1045, 1046, 1776, 1740, 1571, 1352, 986, 1587, 25,
	1356, 1476, 151, 1056, 761, 388, 1116, 1535, 463, 597,
	1206, 1748, 1537, 874, 875, 377, 748, 981, 243, 945,
	976, 63, 1568, 384, 647, 1207, 1510, 1049, 596, 487,
	1583, 384, 647, 1581, 1042, 485, 483, 1043, 1621, 1588,
	1608, 942, 1591, 140, 1565, 1611, 1379, 1609, 1600, 1134,
	1589, 1590, 20, 1592, 15, 1619, 1416, 1610, 988, 848,
	1006, 1620, 1000, 1140, 1141, 1142, 1390, 16, 43, 23,
	644, 651, 43, 43, 1577, 508, 987, 43, 43, 43,
	43, 43, 1080, 1037, 1747, 17, 18, 1566, 1644, 1601,
	1464, 1038, 43, 835, 1429, 844, 1517, 845, 846, 847,
	1165, 1746, 1201, 1650, 715, 1636, 1171, 1656, 1680, 1385,
	843, 1651, 1659, 1706, 1661, 1174, 1175, 1671, 1176, 1177,
	1660, 1410, 1409, 1649, 1662, 238, 239, 240, 1485, 1222,
	1485, 43, 1408, 1187, 1682, 1407, 644, 1112, 1681, 1334,
	1333, 507, 506, 1796, 1357, 1469, 384, 1471, 1111, 1690,
	412, 1450, 837, 43, 839, 986, 1587, 1709, 1716, 1680,
	1492, 662, 43, 1712, 986, 1587, 853, 644, 8, 1,
	1701, 1231, 13, 1346, 1703, 12, 1646, 231, 1717, 1721,
	1135, 740, 539, 1628, 1693, 1694, 1714, 1718, 1543, 525,
	1760, 1719, 1389, 1720, 1227, 1370, 1000, 1489, 1490, 1257,
	447, 173, 1184, 419, 14, 1367, 1217, 1139, 650, 1386,
	486, 1281, 859, 1577, 675, 644, 157, 147, 1744, 668,
	1749, 380, 1739, 28, 1552, 657, 10, 1101, 657, 657,
	657, 158, 1772, 1757, 987, 156, 155, 154, 152, 450,
	1771, 1759, 191, 987, 1768, 1769, 1770, 196, 1758, 219,
	62, 1170, 60, 61, 65, 1784, 1785, 1780, 1712, 1778,
	1773, 1393, 1313, 1422, 193, 1509, 1569, 1531, 1180, 1385,
	1570, 494, 19, 1786, 1016, 727, 1683, 1793, 1400, 1715,
	1485, 1209, 1782, 1745, 21, 22, 1797, 24, 1705, 1712,
	1167, 758, 982, 1800, 526, 892, 538, 986, 1587, 1803,
	1805, 1332, 1801, 537, 1208, 1211, 536, 1446, 1653, 1580,
	1517, 644, 1798, 697, 1584, 1384, 1487, 1348, 1501, 1499,
	1221, 1498, 1669, 1665, 1383, 1447, 1641, 1044, 1577, 1365,
	1067, 836, 1047, 195, 1364, 5, 200, 1078, 1065, 202,
	4, 644, 1631, 1632, 1264, 3, 1064, 1063, 1062, 733,
	734, 735, 736, 737, 738, 739, 212, 213, 214, 215,
	216, 1060, 1061, 1485, 1058, 1059, 1057, 1039, 645, 1512,
	2, 0, 1635, 0, 0, 1385, 987, 0, 0, 0,
	1385, 1385, 1385, 1385, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 0, 699, 0, 702,
	0, 0, 0, 0, 0, 716, 717, 718, 719, 720,
	721, 722, 1316, 700, 701, 698, 723, 724, 725, 726,
	704, 703, 713, 714, 706, 707, 708, 709, 710, 711,
	712, 705, 1434, 0, 1435, 0, 1327, 1436, 0, 0,
	1437, 1438, 1440, 1442, 1444, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 1439, 695, 1385, 0, 0, 0,
	0, 454, 0, 0, 0, 1385, 0, 1465, 1353, 0,
	0, 0, 0, 0, 0, 1386, 0, 0, 0, 0,
	1386, 1386, 1386, 1386, 1386, 1369, 0, 0, 0, 0,
	0, 0, 0, 695, 0, 1512, 0, 1607, 704, 703,
	713, 714, 706, 707, 708, 709, 710, 711, 712, 705,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 704, 703, 713, 714,
	706, 707, 708, 709, 710, 711, 712, 705, 0, 0,
	0, 0, 0, 695, 0, 0, 1386, 0, 0, 0,
	0, 1657, 1658, 0, 0, 1386, 0, 0, 1559, 704,
	703, 713, 714, 706, 707, 708, 709, 710, 711, 712,
	705, 0, 0, 0, 1132, 0, 0, 0, 1567, 775,
	0, 0, 647, 0, 0, 1449, 704, 703, 713, 714,
	706, 707, 708, 709, 710, 711, 712, 705, 704, 703,
	713, 714, 706, 707, 708, 709, 710, 711, 712, 705,
	1131, 862, 0, 0, 777, 0, 1477, 1478, 1211, 0,
	0, 0, 1602, 0, 0, 864, 0, 0, 1713, 0,
	647, 704, 703, 713, 714, 706, 707, 708, 709, 710,
	711, 712, 705, 0, 0, 0, 0, 0, 0, 1727,
	1728, 1729, 0, 0, 0, 0, 0, 0, 0, 0,
	1634, 0, 0, 0, 0, 1637, 1638, 1639, 1640, 775,
	0, 0, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 715, 0, 0, 798, 427, 428, 429,
	0, 606, 608, 778, 0, 432, 430, 440, 441, 863,
	0, 66, 776, 0, 777, 0, 0, 782, 781, 1123,
	1124, 1125, 0, 862, 0, 0, 0, 1127, 1128, 1129,
	0, 0, 0, 1713, 0, 0, 1783, 864, 0, 0,
	0, 865, 866, 867, 868, 869, 870, 871, 0, 1574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1696, 0, 1713, 0, 647, 1702, 733, 674,
	677, 715, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 116, 117, 0, 118, 119, 120, 122,
	121, 0, 925, 778, 0, 0, 1618, 0, 0, 0,
	1730, 66, 776, 0, 0, 0, 0, 782, 781, 715,
	0, 863, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1743, 0, 0, 0, 0, 0,
	0, 0, 0, 1648, 1751, 1752, 1753, 0, 1756, 0,
	0, 0, 715, 865, 866, 867, 868, 869, 870, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 0, 1079, 1069, 1068, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 0, 1071, 1790,
	1791, 1792, 0, 0, 0, 0, 0, 1263, 0, 0,
	0, 0, 434, 439, 67, 674, 0, 0, 0, 860,
	0, 0, 0, 0, 715, 0, 0, 0, 0, 1804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1722, 0, 0, 1723, 0, 0, 1725, 0, 0,
	0, 0, 1774, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 1305, 1735, 436, 0, 438, 437, 0,
	600, 0, 0, 446, 0, 426, 427, 428, 429, 0,
	0, 1648, 0, 0, 432, 430, 440, 441, 0, 0,
	748, 0, 1320, 1321, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 1777, 748, 362, 351, 0, 310, 364,
	280, 298, 372, 300, 301, 337, 259, 320, 0, 295,
	277, 0, 0, 0, 283, 252, 290, 253, 281, 312,
	0, 278, 0, 353, 323, 1072, 1073, 1075, 370, 0,
	328, 1074, 0, 0, 0, 0, 315, 355, 318, 346,
	309, 338, 267, 327, 365, 296, 333, 366, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 360, 292, 375, 0, 336, 251,
	330, 0, 257, 260, 371, 358, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 314, 319, 343, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 326, 1431, 0, 0, 264, 258, 0,
	311, 0, 0, 0, 266, 0, 285, 344, 0, 248,
	349, 356, 308, 0, 0, 359, 305, 304, 0, 0,
	0, 0, 0, 0, 297, 386, 341, 373, 363, 316,
	354, 282, 291, 0, 289, 0, 0, 0, 325, 339,
	0, 434, 439, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 286, 347, 350, 271,
	335, 261, 293, 342, 294, 317, 276, 0, 0, 0,
	0, 0, 1146, 1147, 0, 1148, 0, 0, 1394, 0,
	1151, 0, 0, 0, 436, 0, 438, 437, 0, 0,
	0, 0, 1154, 1155, 0, 0, 1156, 1157, 0, 1158,
	1159, 444, 443, 0, 0, 646, 0, 1079, 1069, 1068,
	0, 1402, 0, 0, 0, 0, 0, 0, 0, 1070,
	1554, 0, 1555, 0, 1556, 0, 1557, 1558, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 275, 357, 0, 0, 0, 0, 1403, 1401, 1397,
	1396, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	1399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1576, 0, 0, 0,
	0, 0, 270, 274, 268, 269, 321, 322, 367, 368,
	369, 345, 265, 0, 272, 273, 0, 352, 0, 0,
	0, 324, 0, 0, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 299, 250, 303, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 1077, 307, 302, 329,
	331, 340, 348, 0, 279, 313, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	351, 0, 310, 364, 280, 298, 372, 300, 301, 337,
	259, 320, 0, 295, 277, 0, 0, 0, 283, 252,
	290, 253, 281, 312, 0, 278, 0, 353, 323, 1072,
	1073, 1075, 370, 0, 328, 1074, 0, 0, 0, 0,
	315, 355, 318, 346, 309, 338, 267, 327, 365, 296,
	333, 366, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 360, 292,
	375, 0, 336, 251, 330, 0, 257, 260, 371, 358,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 314,
	319, 343, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 326, 0, 0,
	0, 264, 258, 0, 311, 0, 0, 0, 266, 0,
	285, 344, 0, 248, 349, 356, 308, 0, 0, 359,
	305, 304, 0, 0, 0, 0, 0, 0, 297, 386,
	341, 373, 363, 316, 354, 282, 291, 0, 289, 0,
	0, 0, 325, 339, 0, 0, 0, 0, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 1146, 256, 249,
	286, 347, 350, 271, 335, 261, 293, 342, 294, 317,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 646,
	0, 1079, 1069, 1068, 255, 275, 357, 0, 0, 0,
	0, 1403, 1401, 1070, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 1399, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 274, 268, 269,
	321, 322, 367, 368, 369, 345, 265, 0, 272, 273,
	0, 352, 0, 0, 0, 324, 0, 0, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 299, 250, 303,
	0, 0, 0, 0, 0, 0, 0, 262, 263, 0,
	0, 307, 302, 329, 331, 340, 348, 0, 279, 313,
	362, 351, 0, 310, 364, 280, 298, 372, 300, 301,
	337, 259, 320, 0, 295, 277, 0, 0, 0, 283,
	252, 290, 253, 281, 312, 0, 278, 0, 353, 323,
	1077, 0, 0, 370, 0, 328, 0, 0, 0, 0,
	1076, 315, 355, 318, 346, 309, 338, 267, 327, 365,
	296, 333, 366, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 360,
	292, 375, 0, 336, 251, 330, 0, 257, 260, 371,
	358, 287, 288, 1072, 1073, 1075, 0, 0, 0, 1074,
	314, 319, 343, 306, 0, 0, 0, 0, 0, 1412,
	0, 1312, 0, 0, 0, 0, 284, 0, 326, 0,
	0, 0, 264, 258, 0, 311, 0, 0, 0, 266,
	0, 285, 344, 0, 248, 349, 356, 308, 0, 0,
	359, 305, 304, 0, 0, 0, 949, 0, 0, 297,
	386, 341, 373, 363, 316, 354, 282, 291, 0, 289,
	0, 0, 0, 325, 339, 0, 0, 0, 0, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	249, 286, 347, 350, 271, 335, 261, 293, 342, 294,
	317, 276, 0, 0, 958, 964, 962, 0, 0, 959,
	0, 0, 957, 0, 0, 966, 0, 0, 965, 951,
	961, 963, 960, 955, 0, 950, 0, 968, 967, 969,
	948, 971, 0, 0, 1080, 975, 972, 974, 973, 0,
	970, 0, 0, 0, 0, 0, 1402, 0, 0, 952,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 255, 275, 357, 0, 0,
	0, 0, 1403, 1401, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 1399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 274, 268,
	269, 321, 322, 367, 368, 369, 345, 265, 0, 272,
	273, 0, 352, 0, 0, 0, 324, 0, 0, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 299, 250,
	303, 0, 0, 0, 0, 0, 0, 0, 262, 263,
	0, 0, 307, 302, 329, 331, 340, 348, 0, 279,
	313, 362, 351, 0, 310, 364, 280, 298, 372, 300,
	301, 337, 259, 320, 0, 295, 277, 0, 0, 0,
	283, 252, 290, 253, 281, 312, 0, 278, 0, 353,
	323, 0, 89, 0, 370, 32, 328, 0, 0, 0,
	0, 0, 315, 355, 318, 346, 309, 338, 267, 327,
	365, 296, 333, 366, 0, 0, 0, 446, 1088, 45,
	33, 0, 1086, 0, 0, 0, 0, 0, 0, 332,
	360, 292, 375, 0, 336, 251, 330, 0, 257, 260,
	371, 358, 287, 288, 0, 0, 0, 1085, 0, 0,
	0, 314, 319, 343, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 1084, 284, 0, 326,
	0, 0, 0, 264, 258, 0, 311, 74, 0, 0,
	266, 0, 285, 344, 0, 248, 349, 356, 308, 0,
	0, 359, 305, 304, 0, 0, 0, 0, 0, 0,
	297, 386, 341, 373, 363, 316, 354, 282, 291, 0,
	289, 0, 90, 0, 325, 339, 0, 0, 0, 0,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 249, 286, 347, 350, 271, 335, 261, 293, 342,
	294, 317, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	0, 116, 117, 0, 118, 119, 120, 122, 121, 91,
	92, 93, 97, 95, 94, 96, 68, 70, 0, 66,
	69, 75, 71, 72, 73, 87, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 88, 98, 99,
	100, 101, 102, 103, 104, 105, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 255, 275, 357, 0,
	0, 0, 0, 0, 385, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 274,
	268, 269, 321, 322, 367, 368, 369, 345, 265, 0,
	272, 273, 0, 352, 0, 0, 0, 324, 0, 0,
	0, 374, 67, 0, 0, 0, 0, 0, 0, 299,
	250, 303, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 0, 0, 307, 302, 329, 331, 340, 348, 0,
	279, 313, 362, 351, 0, 310, 364, 280, 298, 372,
	300, 301, 337, 259, 320, 0, 295, 277, 0, 0,
	0, 283, 252, 290, 253, 281, 312, 0, 278, 0,
	353, 323, 0, 89, 0, 370, 0, 328, 0, 0,
	0, 0, 0, 315, 355, 318, 346, 309, 338, 267,
	327, 365, 296, 333, 366, 0, 0, 0, 33, 0,
	670, 33, 671, 0, 0, 0, 0, 0, 0, 0,
	332, 360, 292, 375, 0, 336, 251, 330, 0, 257,
	260, 371, 358, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 314, 319, 343, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 284, 0,
	326, 0, 0, 0, 264, 258, 0, 311, 74, 0,
	0, 266, 0, 285, 344, 0, 248, 349, 356, 308,
	0, 0, 359, 305, 304, 0, 0, 0, 0, 0,
	0, 297, 386, 341, 373, 363, 316, 354, 282, 291,
	0, 289, 0, 90, 0, 325, 339, 0, 0, 0,
	0, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 249, 286, 347, 350, 271, 335, 261, 293,
	342, 294, 317, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 0, 116, 117, 0, 118, 119, 120, 122, 121,
	91, 92, 93, 97, 95, 94, 96, 68, 70, 0,
	66, 69, 75, 71, 72, 73, 87, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 88, 98,
	99, 100, 101, 102, 103, 104, 105, 0, 0, 0,
	0, 254, 646, 0, 1079, 1069, 1068, 255, 275, 357,
	0, 0, 0, 0, 0, 385, 1070, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	274, 268, 269, 321, 322, 367, 368, 369, 345, 265,
	0, 272, 273, 0, 352, 0, 0, 0, 324, 0,
	0, 0, 374, 67, 0, 0, 0, 0, 0, 0,
	299, 250, 303, 0, 0, 0, 0, 0, 0, 0,
	262, 263, 0, 0, 307, 302, 329, 331, 340, 348,
	0, 279, 313, 362, 351, 0, 310, 364, 280, 298,
	372, 300, 301, 337, 259, 320, 0, 295, 277, 0,
	0, 0, 283, 252, 290, 253, 281, 312, 0, 278,
	0, 353, 323, 1077, 0, 0, 370, 0, 328, 0,
	0, 0, 0, 1076, 315, 355, 318, 346, 309, 338,
	267, 327, 365, 296, 333, 366, 0, 381, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	0, 332, 360, 292, 375, 0, 336, 251, 330, 0,
	257, 260, 371, 358, 287, 288, 1072, 1073, 1075, 0,
	0, 0, 1074, 314, 319, 343, 306, 0, 0, 0,
	0, 0, 1372, 0, 0, 0, 0, 0, 0, 284,
	0, 326, 0, 0, 0, 264, 258, 0, 311, 0,
	0, 0, 266, 0, 285, 344, 0, 248, 349, 356,
	308, 0, 0, 359, 305, 304, 0, 0, 0, 0,
	0, 0, 297, 386, 341, 373, 363, 316, 354, 282,
	291, 0, 289, 0, 0, 0, 325, 339, 0, 0,
	0, 0, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 249, 286, 347, 350, 271, 335, 261,
	293, 342, 294, 317, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 255, 275,
	357, 0, 0, 0, 0, 0, 385, 0, 0, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 274, 268, 269, 321, 322, 367, 368, 369, 345,
	265, 0, 272, 273, 0, 352, 0, 0, 0, 324,
	0, 0, 0, 374, 0, 0, 0, 0, 0, 0,
	0, 299, 250, 303, 0, 0, 0, 0, 0, 0,
	0, 262, 263, 0, 0, 307, 302, 329, 331, 340,
	348, 0, 279, 313, 362, 351, 0, 310, 364, 280,
	298, 372, 300, 301, 337, 259, 320, 0, 295, 277,
	0, 0, 0, 283, 252, 290, 253, 281, 312, 0,
	278, 0, 353, 323, 0, 0, 0, 370, 0, 328,
	0, 0, 0, 0, 0, 315, 355, 318, 346, 309,
	338, 267, 327, 365, 296, 333, 366, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 360, 292, 375, 0, 336, 251, 330,
	0, 257, 260, 371, 358, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 314, 319, 343, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	284, 0, 326, 0, 0, 0, 264, 258, 0, 311,
	0, 0, 0, 266, 0, 285, 344, 0, 248, 349,
	356, 308, 0, 0, 359, 305, 304, 0, 0, 0,
	0, 0, 0, 297, 386, 341, 373, 363, 316, 354,
	282, 291, 0, 289, 0, 0, 0, 325, 339, 0,
	0, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 249, 286, 347, 350, 271, 335,
	261, 293, 342, 294, 317, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 255,
	275, 357, 0, 0, 0, 0, 0, 385, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 274, 268, 269, 321, 322, 367, 368, 369,
	345, 265, 0, 272, 273, 0, 352, 0, 0, 0,
	324, 0, 0, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 299, 250, 303, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 307, 302, 329, 331,
	340, 348, 0, 279, 313, 362, 351, 0, 310, 364,
	280, 298, 372, 300, 301, 337, 259, 320, 0, 295,
	277, 0, 0, 0, 283, 252, 290, 253, 281, 312,
	0, 278, 0, 353, 323, 0, 0, 0, 370, 0,
	328, 0, 0, 0, 0, 0, 315, 355, 318, 346,
	309, 338, 267, 327, 365, 296, 333, 366, 0, 0,
	0, 446, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 360, 292, 375, 0, 336, 251,
	330, 0, 257, 260, 371, 358, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 314, 319, 343, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 326, 0, 0, 0, 264, 258, 0,
	311, 0, 0, 0, 266, 0, 285, 344, 0, 248,
	349, 356, 308, 0, 0, 359, 305, 304, 0, 0,
	0, 0, 0, 0, 297, 386, 341, 373, 363, 316,
	354, 282, 291, 0, 289, 0, 0, 0, 325, 339,
	0, 0, 0, 0, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 249, 286, 347, 350, 271,
	335, 261, 293, 342, 294, 317, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	255, 275, 357, 0, 0, 0, 0, 0, 385, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 274, 268, 269, 321, 322, 367, 368,
	369, 345, 265, 0, 272, 273, 0, 352, 0, 0,
	0, 324, 0, 0, 0, 374, 0, 0, 0, 0,
	0, 0, 0, 299, 250, 303, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 307, 302, 329,
	331, 340, 348, 0, 279, 313, 362, 351, 0, 310,
	364, 280, 298, 372, 300, 301, 337, 259, 320, 0,
	295, 277, 0, 0, 0, 283, 252, 290, 253, 281,
	312, 0, 278, 0, 353, 323, 0, 0, 0, 370,
	0, 328, 0, 0, 0, 0, 0, 315, 355, 318,
	346, 309, 338, 267, 327, 365, 296, 333, 366, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 332, 360, 292, 375, 0, 336,
	251, 330, 0, 257, 260, 371, 358, 287, 288, 499,
	0, 0, 0, 0, 0, 0, 314, 319, 343, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 284, 0, 326, 0, 0, 0, 264, 258,
	0, 311, 0, 0, 0, 266, 0, 285, 344, 0,
	248, 349, 356, 308, 0, 0, 359, 305, 304, 0,
	0, 0, 0, 0, 0, 297, 386, 341, 373, 363,
	316, 354, 282, 291, 0, 289, 0, 0, 0, 325,
	339, 0, 0, 0, 0, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 249, 286, 347, 350,
	271, 335, 261, 293, 342, 294, 317, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 255, 275, 357, 0, 0, 0, 0, 0, 385,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 274, 268, 269, 321, 322, 367,
	368, 369, 345, 265, 0, 272, 273, 0, 352, 0,
	0, 0, 324, 0, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 299, 250, 303, 0, 0, 0,
	0, 0, 0, 0, 262, 263, 0, 0, 307, 302,
	329, 331, 340, 348, 0, 279, 313, 362, 351, 0,
	310, 364, 280, 298, 372, 300, 301, 337, 259, 320,
	0, 295, 277, 0, 0, 0, 283, 252, 290, 253,
	281, 312, 0, 278, 0, 353, 323, 0, 0, 0,
	370, 0, 328, 0, 0, 0, 0, 0, 315, 355,
	318, 346, 309, 338, 267, 327, 365, 296, 333, 366,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 360, 292, 375, 0,
	336, 251, 330, 0, 257, 260, 371, 358, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 314, 319, 343,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 284, 0, 326, 0, 0, 0, 264,
	258, 0, 311, 0, 0, 0, 266, 0, 285, 344,
	0, 248, 349, 356, 308, 0, 0, 359, 305, 304,
	0, 0, 0, 0, 0, 0, 297, 386, 341, 373,
	363, 316, 354, 282, 291, 0, 289, 0, 0, 0,
	325, 339, 0, 0, 0, 0, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 249, 286, 347,
	350, 271, 335, 261, 293, 342, 294, 317, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 255, 275, 357, 0, 0, 0, 0, 0,
	385, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 274, 268, 269, 321, 322,
	367, 368, 369, 345, 265, 0, 272, 273, 0, 352,
	0, 0, 0, 324, 0, 0, 0, 374, 0, 0,
	0, 0, 0, 0, 0, 299, 250, 303, 0, 0,
	0, 0, 0, 0, 0, 262, 263, 0, 0, 307,
	302, 329, 331, 340, 348, 0, 279, 313, 362, 351,
	0, 310, 364, 280, 298, 372, 300, 301, 337, 259,
	320, 0, 295, 277, 0, 0, 0, 283, 252, 290,
	253, 281, 312, 0, 278, 0, 353, 323, 0, 0,
	0, 370, 0, 328, 0, 0, 0, 0, 0, 315,
	355, 318, 346, 309, 338, 267, 327, 365, 296, 333,
	366, 0, 0, 0, 44, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 360, 292, 375,
	0, 336, 251, 330, 0, 257, 260, 371, 358, 287,
	288, 0, 0, 0, 0, 0, 0, 0, 314, 319,
	343, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 284, 0, 326, 0, 0, 0,
	264, 258, 0, 311, 0, 0, 0, 266, 0, 285,
	344, 0, 248, 349, 356, 308, 0, 0, 359, 305,
	304, 0, 0, 0, 0, 0, 0, 297, 0, 341,
	373, 363, 316, 354, 282, 291, 0, 289, 0, 0,
	0, 325, 339, 0, 0, 0, 0, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 249, 286,
	347, 350, 271, 335, 261, 293, 342, 294, 317, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 521, 0, 0, 424, 0, 520, 446, 0,
	426, 427, 428, 429, 564, 0, 565, 0, 0, 432,
	430, 440, 441, 0, 555, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 0, 446, 544, 541,
	542, 546, 547, 548, 549, 0, 0, 0, 545, 550,
	440, 441, 0, 0, 0, 0, 518, 533, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 255, 275, 357, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 0, 0, 0, 334, 580,
	0, 532, 0, 0, 947, 529, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 0, 270, 274, 268, 269, 321,
	322, 367, 368, 369, 345, 265, 0, 272, 273, 949,
	352, 0, 0, 0, 324, 0, 0, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 299, 250, 303, 0,
	0, 540, 0, 0, 0, 0, 262, 263, 0, 0,
	307, 302, 329, 331, 340, 348, 0, 279, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 964, 962,
	0, 0, 959, 0, 0, 957, 0, 0, 966, 0,
	0, 965, 951, 961, 963, 960, 955, 0, 950, 0,
	968, 967, 969, 948, 971, 0, 434, 439, 975, 972,
	974, 973, 566, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 0, 567, 568, 0, 0, 0,
	0, 0, 954, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 436,
	0, 438, 437, 0, 0, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 444, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 579,
	575, 576, 573, 574, 572, 571, 570, 581, 557, 558,
	559, 560, 562, 0, 0, 444, 443, 561, 521, 0,
	0, 0, 0, 520, 0, 0, 0, 0, 0, 0,
	564, 0, 565, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 0, 0, 0, 0, 0, 0, 1616, 0,
	403, 0, 577, 446, 544, 541, 542, 546, 547, 548,
	549, 0, 0, 0, 545, 550, 440, 441, 1617, 0,
	0, 0, 518, 533, 0, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 0, 0, 0, 0, 580, 0, 532, 0, 0,
	528, 529, 534, 0, 808, 0, 521, 0, 0, 0,
	0, 520, 0, 0, 0, 0, 0, 0, 564, 578,
	565, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	0, 446, 544, 541, 542, 546, 547, 548, 549, 0,
	0, 0, 545, 550, 440, 441, 0, 540, 0, 0,
	518, 533, 0, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 813,
	0, 0, 0, 580, 0, 532, 0, 0, 528, 529,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 567, 568, 0, 0, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 579, 575, 576, 573, 574,
	572, 571, 570, 581, 557, 558, 559, 560, 562, 0,
	0, 444, 443, 561, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 567,
	568, 0, 0, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 579, 575, 576, 573, 574, 572, 571,
	570, 581, 557, 558, 559, 560, 562, 0, 0, 444,
	443, 561, 0, 521, 0, 0, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 564, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 403, 577, 695, 446, 544,
	541, 542, 546, 547, 548, 549, 0, 0, 0, 545,
	550, 440, 441, 0, 0, 0, 0, 518, 533, 0,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 531, 0, 0, 0, 0,
	580, 0, 532, 0, 521, 528, 529, 534, 0, 520,
	0, 0, 0, 0, 0, 0, 564, 0, 565, 0,
	0, 0, 0, 0, 578, 0, 555, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 0, 446,
	544, 541, 542, 546, 547, 548, 549, 0, 0, 0,
	545, 550, 440, 441, 0, 0, 0, 0, 518, 533,
	0, 563, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 813, 0, 0,
	0, 580, 0, 532, 0, 0, 528, 529, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 582, 0, 567, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	579, 575, 576, 573, 574, 572, 571, 570, 581, 557,
	558, 559, 560, 562, 566, 0, 444, 443, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 567, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 579, 575, 576, 573, 574, 572, 571, 570, 581,
	557, 558, 559, 560, 562, 646, 0, 444, 443, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 0, 0, 0, 0,
	520, 0, 0, 0, 0, 0, 0, 564, 0, 565,
	0, 0, 0, 0, 577, 0, 0, 555, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 0,
	446, 544, 541, 542, 546, 547, 548, 549, 0, 0,
	0, 545, 550, 440, 441, 0, 0, 0, 0, 518,
	533, 0, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 531, 0, 0,
	0, 0, 580, 0, 532, 0, 521, 528, 529, 534,
	0, 520, 0, 0, 0, 0, 0, 0, 564, 0,
	565, 0, 0, 0, 0, 0, 578, 0, 555, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	0, 446, 544, 541, 542, 546, 547, 548, 549, 0,
	0, 0, 545, 550, 440, 441, 0, 0, 0, 0,
	518, 533, 0, 563, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 0,
	0, 0, 0, 580, 0, 532, 0, 0, 528, 529,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 582, 0, 567, 568,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 579, 575, 576, 573, 574, 572, 571, 570,
	581, 557, 558, 559, 560, 562, 566, 0, 444, 443,
	561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 567,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 579, 575, 576, 573, 574, 572, 571,
	570, 581, 557, 558, 559, 560, 562, 0, 0, 444,
	443, 561, 898, 899, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	0, 565, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 0, 0, 0, 0, 0, 577, 0, 0, 403,
	0, 0, 446, 544, 541, 542, 546, 547, 548, 549,
	0, 0, 0, 545, 550, 440, 441, 0, 0, 0,
	0, 0, 533, 0, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 531,
	0, 0, 0, 0, 580, 0, 532, 0, 521, 528,
	529, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 0, 565, 0, 0, 0, 0, 0, 578, 0,
	555, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 0, 446, 544, 541, 542, 546, 547, 548,
	549, 0, 0, 0, 545, 550, 440, 441, 0, 0,
	0, 0, 0, 533, 0, 563, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 0, 0, 0, 0, 580, 0, 532, 0, 0,
	528, 529, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 582, 0,
	567, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 579, 575, 576, 573, 574, 572,
	571, 570, 581, 557, 558, 559, 560, 562, 566, 0,
	444, 443, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	0, 567, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 579, 575, 576, 573, 574,
	572, 571, 570, 581, 557, 558, 559, 560, 562, 0,
	0, 444, 443, 561, 0, 564, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 0, 446, 544,
	541, 542, 546, 547, 548, 549, 0, 0, 577, 545,
	550, 440, 441, 0, 0, 0, 0, 0, 533, 0,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 531, 0, 0, 0, 0,
	580, 0, 532, 0, 0, 528, 529, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 0, 565, 0,
	0, 0, 0, 0, 578, 0, 555, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 446,
	544, 541, 542, 546, 547, 548, 549, 0, 0, 0,
	545, 550, 440, 441, 0, 0, 0, 0, 0, 533,
	0, 563, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 0, 0, 0,
	0, 580, 0, 532, 0, 0, 528, 529, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 540, 582, 0, 567, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	579, 575, 576, 573, 574, 572, 571, 570, 581, 557,
	558, 559, 560, 562, 566, 0, 444, 443, 561, 0,
	0, 0, 0, 74, 0, 801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 0, 567, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	569, 579, 575, 576, 573, 574, 572, 571, 570, 581,
	557, 558, 559, 560, 562, 0, 0, 444, 443, 561,
	0, 0, 0, 0, 0, 33, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 0, 116, 117, 0,
	118, 119, 120, 122, 121, 91, 92, 93, 97, 95,
	94, 96, 68, 70, 577, 66, 69, 75, 71, 72,
	73, 87, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 88, 98, 99, 100, 101, 102, 103,
	104, 105, 74, 0, 0, 0, 800, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 0, 116, 117, 0, 118,
	119, 120, 122, 121, 91, 92, 93, 97, 95, 94,
	96, 68, 70, 0, 66, 69, 75, 71, 72, 73,
	87, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 98, 99, 100, 101, 102, 103, 104,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	485, -1000, -254, -1000, -1000, 1376, 1421, 322, -1000, -1000,
	-1000, 893, 432, 430, 220, 391, 785, 437, 877, 463,
	320, -1000, -222, -205, -1000, -101, 436, -1000, 1227, -1000,
	4010, 4010, 4010, -1000, 328, 785, 320, 143, 320, 1419,
	354, 697, 1518, 519, -1000, -1000, 320, 877, 692, -1000,
	-1000, -1000, -1000, 192, 165, 103, 152, -149, 11, -1000,
	-1000, -1000, -1000, -1000, 1303, -1000, -1000, -1000, 1303, 67,
	1375, 1303, 1375, -1000, 1303, 1375, 53, 53, 53, 53,
	53, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1374, 1363,
	-1000, 1303, 1303, 1303, 1303, 1303, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1356, 107, 1356, 1315,
	1315, -1000, -1000, 152, 152, 1368, 877, 785, 1409, 877,
	-232, 877, 877, 1617, 877, -1000, -1000, -1000, 171, 1492,
	4010, 6233, 877, -1000, 1489, 476, 877, 4378, -1000, 1469,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1362, 730, 785,
	284, 172, 1293, 279, 481, 1011, 281, -1000, -1000, -1000,
	795, -1000, 785, -1000, 1641, -1000, -1000, 280, -1000, 278,
	684, 902, 877, 1361, 159, 1357, 6387, 849, -1000, -271,
	-1000, 2, -1000, -1000, 827, 53, 1303, -1000, 53, 784,
	53, 53, -1000, -1000, 535, 1475, 535, 535, 535, 535,
	899, 899, -130, -130, -1000, -1000, -1000, -1000, 846, 1356,
	-1000, -1000, -1000, 840, -1000, 877, 785, 1354, 1397, 877,
	1511, 350, -1000, -1000, 1510, 1504, 1252, -1000, -1000, 166,
	-1000, 372, -1000, 785, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1369, -1000, 264, 469,
	5491, 165, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395,
	-1000, 1632, 1556, 270, -14, -207, 1008, -1000, -1000, 1350,
	-1000, -1000, 7660, -1000, 987, 935, -1000, -8, 785, -1000,
	-211, 101, -6, -1000, -1000, 1293, -1000, 1349, 7660, 1503,
	-1000, 1478, 835, -1000, 2402, -1000, -241, -1000, -1000, -1000,
	-241, -1000, -1000, -1000, 1293, -1000, 1346, 1345, -1000, 1342,
	-1000, -1000, 1293, 1293, 1293, 516, -1000, -1000, -1000, -1000,
	-1000, -1000, 1244, 535, 53, 535, 1243, 1242, 535, 535,
	-1000, -1000, 925, 580, -1000, -1000, -1000, -1000, 1222, -1000,
	1216, -1000, 106, 102, -1000, 1288, -1000, 1208, 1292, 1396,
	236, 877, 1341, 1304, 320, 1304, 1552, 222, 877, 1617,
	384, 1617, 372, 785, 266, 785, -1000, -1000, 295, 4007,
	-1000, -1000, 1206, -1000, 265, 1303, 488, 488, -216, 273,
	258, -207, 1293, 1337, -1000, 395, 696, -1000, 7660, 1817,
	1293, 1293, -1000, -1000, 499, -1000, -1000, -1000, 8377, 8377,
	8377, 8377, 8377, 8377, 8377, -1000, -1000, -1000, -1000, 23,
	-1000, -241, -1000, 857, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 513, 512, -1000, 7569, 1293, 1293, 1293, 1293, 1293,
	1293, 1293, 1293, 7660, 1293, 1463, 1293, 1293, 1293, 1293,
	1293, 1293, 1293, 1293, 1293, 1293, 1293, 1971, 1293, 1293,
	1293, 1293, -1000, -1000, -1000, -1000, -207, 1335, -1000, -1000,
	-1000, 684, -1000, 7660, 384, 781, 131, -1000, 1287, 1240,
	2133, 1239, -1000, 8605, -1000, 942, -1000, 817, -1000, 802,
	1238, 6830, 7238, 7238, 5862, -1000, -1000, 535, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 53, 892, 53, -3,
	-7, 831, -1000, 830, 236, 785, 877, 1237, 1284, -1000,
	245, 1334, 384, -1000, 1578, 1647, -1000, 1304, 877, -1000,
	331, 1589, -1000, -1000, 1540, -1000, 1270, -1000, -1000, 1218,
	1617, 1333, 785, -1000, -1000, 251, 785, -1000, -1000, -1000,
	-1000, -1000, 2064, 395, 1486, -1000, -1000, -1000, 728, -1000,
	-1000, 686, 204, 712, -1000, 785, -207, 1332, 7660, 395,
	1203, 226, 7660, 7660, 764, -1000, 549, 7981, 724, 572,
	8377, 8377, 8377, 8377, 8377, 8377, 8377, 8377, 8377, 8377,
	8377, 8377, 8377, 8377, 8377, 2061, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 909, -1000,
	1304, 926, 926, -239, -239, -239, -239, -239, -239, 75,
	-1000, -260, -1000, -1000, 5120, 5862, 942, 1194, 605, 7569,
	7238, 7238, 6416, 7660, 7238, 7238, 7238, 1493, 669, 605,
	855, 1539, 942, 942, 942, -1000, 942, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57, -1000, -1000, -1000,
	-1000, -1000, -1000, 7238, 7238, 7238, 7238, -1000, 785, 1293,
	696, 1196, -151, 7660, 1324, 828, -1000, 1177, -241, -1000,
	-1000, -1000, -149, -1000, -1000, -1000, -1000, 942, 7238, 1180,
	1194, -1000, 652, -1000, 511, 1180, 652, 1180, 1293, -1000,
	535, -1000, 535, -1000, -1000, 1158, 1150, 1133, 1322, 1321,
	-229, 827, 236, 1190, 1566, 1575, 1304, 1513, 1447, -1000,
	942, 1502, 785, -1000, -1000, -1000, -1000, -1000, 202, 668,
	785, 1251, 1234, -1000, 619, 1319, 146, 311, 1392, 2166,
	176, -1000, 906, 622, 876, 620, 609, 607, 606, 600,
	599, 597, -1000, -1000, -1000, -1000, -1000, 1639, -1000, -1000,
	-1000, 1627, 1318, 1317, 395, 696, 1186, 2064, -1000, -110,
	549, 571, -1000, -1000, 783, -1000, -1000, 2038, 8377, 8377,
	8377, -1000, -1000, -1000, -1000, 724, 8377, 8377, 8377, 1966,
	2038, 2005, 363, 478, -239, 201, 201, 17, 17, 17,
	17, 17, 4, 4, -1000, -135, -1000, 1303, 942, -1000,
	-241, 861, -1000, -1000, 860, 1293, 510, -1000, -1000, -1000,
	7660, -1000, 942, 1180, 1180, 701, 1269, 8468, 1303, -1000,
	1303, 1315, -1000, -1000, 121, 1303, 116, -1000, -1000, -1000,
	-1000, 1315, -1000, -1000, -1000, -1000, -1000, 1303, 1303, -1000,
	-1000, 1303, 1303, -1000, 1303, 1303, 646, 1236, 1171, 1180,
	7238, -1000, 679, -1000, 7660, 942, -1000, 507, 877, -1000,
	-1000, -1000, -1000, -1000, 1180, 942, 1263, 1180, 1180, 1182,
	-1000, 7660, 226, 1395, -1000, -1000, 716, -1000, 1112, 1071,
	-1000, -1000, 1180, 7238, -249, -1000, -1000, -1000, 922, -1000,
	-1000, 3636, -249, -249, 7238, -1000, -1000, -1000, -1000, -229,
	236, 395, 1590, 1313, 1067, 1590, 1491, 7660, 7660, 1578,
	-1000, 1304, -1000, -1000, 1493, -1000, -1000, 717, -1000, 1304,
	1232, 185, 141, 7660, -1000, 1251, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1578, -1000, -1000, -1000,
	785, 2802, 785, 785, 785, 378, 8072, 7660, -1000, -1000,
	-1000, 877, 1049, 3639, 619, 619, 3639, 619, 619, 395,
	395, 1312, 1311, 253, -1000, 785, -1000, -162, 2166, 785,
	-1000, 825, -1000, -1000, 742, 815, 742, 742, 742, 742,
	742, 488, 488, 785, 395, 1176, 226, 2064, 1392, -1000,
	-1000, -1000, -1000, 2038, 2038, 2038, -1000, 1966, 2038, 1228,
	-1000, 8377, 8377, 92, -1000, 62, -1000, -241, 5862, 605,
	-1000, -1000, -1000, 3253, 898, 7660, -1000, 274, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3253, 8377, 8377, 8377, 8377, -118, 1164, 642, -1000, 7660,
	672, -1000, 5120, -1000, -1000, -1000, -1000, -1000, 282, 785,
	696, -1000, 1630, -153, 468, -1000, -1000, -1000, -1000, -1000,
	1293, -1000, -1000, 506, -1000, -1000, 942, 1590, 1032, 1174,
	2064, 7660, 384, -229, 2064, -1000, 1635, 544, 726, 1259,
	-1000, 676, 1566, 942, 1249, -1000, -1000, -140, 7660, 4276,
	1251, 605, -1000, 1566, 322, 1019, 823, 1258, 8754, -1000,
	2510, 756, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, 1624, 1621,
	1611, 1610, 3163, 1817, 594, 138, 1537, -1000, -1000, 3639,
	-1000, -1000, -1000, -1000, -1000, 1162, 1157, 395, 395, 1305,
	1293, 1149, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 684, 684, 1146, 1136, 2064, -1000,
	1392, -1000, -1000, 8377, 2038, 2038, -10, -1000, 860, -1000,
	-1000, 942, 1303, 942, -1000, -1000, 696, -1000, -1000, 942,
	1895, 1933, 904, 868, 1293, -108, -1000, 605, 7660, -1000,
	877, -1000, 226, 488, 488, -1000, -1000, -1000, 148, 826,
	805, 788, 754, 7, -1000, 1574, 388, 4749, -1000, 2064,
	1590, 2064, 1392, 605, 1128, 1590, 1392, -1000, 1459, 7660,
	7660, 7660, -1000, 1491, -1000, 7238, -1000, -1000, -247, 605,
	-1000, -1000, 1251, 411, -1000, 1491, 873, 877, 1101, -1000,
	1192, 1424, -1000, -1000, -1000, 1501, 872, 375, 785, 181,
	-1000, -1000, 1257, 2894, -28, -1000, -1000, -1000, 576, 504,
	858, -1000, 1474, -1000, -1000, 2802, 1483, -1000, -1000, -1000,
	-1000, -1000, 1251, 1251, 1251, 668, 200, -1000, 296, 1091,
	1089, 395, 785, -1000, 2166, -1000, -1000, 272, 2064, 1392,
	-1000, 2038, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8377,
	-1000, 8377, -1000, 8377, -1000, 8377, 8377, 942, 838, 605,
	1301, -1000, -1000, -1000, 751, -1000, 741, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 100, -1000, 1571, 942, -1000, 1392,
	2064, -1000, -1000, -1000, 2064, -1000, 1452, 605, 605, -1000,
	-1000, 1130, 7660, -256, 2739, -1000, -1000, 233, 877, -1000,
	233, 1155, 823, 877, -1000, -1000, 855, 823, 823, 823,
	823, 823, -1000, 1440, 1439, -1000, 1433, 1432, 1441, 877,
	-1000, 1084, 872, 524, 1293, -1000, 897, -1000, -1000, -1000,
	4010, 1528, 3265, 1257, -28, 1256, -1000, -25, -9, 6732,
	5862, 535, -1000, -1000, -1000, -1000, -1000, 785, 250, 269,
	170, 137, 184, 149, -1000, 151, 2064, 2064, 1076, 942,
	-1000, 877, 1392, -1000, 1993, 1993, 1993, 1993, 839, -1000,
	-1000, 785, -1000, -1000, -1000, 503, 7660, -1000, -1000, -1000,
	1392, -1000, 1590, 823, 605, 640, -1000, -1000, 1153, 1293,
	-1000, 1590, 823, 1024, -1000, 1018, -1000, 573, 1424, 1309,
	1393, 1072, -1000, -1000, -1000, -1000, 1435, -1000, 1434, -1000,
	-1000, -1000, -1000, -157, 427, 420, 413, 785, -1000, 1304,
	-1000, 1256, -28, -12, -1000, -1000, -1000, -1000, 605, 558,
	-1000, -1000, -1000, 1251, 624, 662, 1251, -1000, -1000, 157,
	-1000, 1392, 1392, -1000, -1000, 1300, -1000, -1000, -1000, -1000,
	-1000, 942, 189, -166, 1074, 5862, 1117, -1000, 605, -1000,
	1600, 1255, -1000, 1289, 855, 1293, -1000, 1120, 785, 1578,
	1024, -1000, 1590, 855, 7660, -1000, -1000, 7660, 1299, -1000,
	7660, -1000, -1000, -1000, -1000, 1298, 1293, 1293, 1293, 968,
	-1000, -1000, -1000, -1000, -39, -48, -1000, 7660, 297, 136,
	187, -1000, -1000, -1000, -1000, 785, -1000, 1451, -125, -181,
	-1000, -1000, -1000, 942, 7660, 1587, 1568, -1000, 1481, 1111,
	1253, -1000, -1000, 7147, 942, 975, 496, 968, 1566, -1000,
	1578, -1000, 605, 605, 384, 605, -43, 384, 384, 384,
	836, 785, -1000, -1000, -1000, 605, -1000, 1251, 2355, 965,
	-1000, 1450, -1000, -1000, -1000, -1000, 7660, 7660, 252, -1000,
	1293, -1000, -1000, 1286, 785, 785, -1000, -1000, 1566, 961,
	946, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 941, 941,
	941, 524, -1000, 161, -1000, -1000, -154, 605, 1254, 1634,
	-1000, 1293, -1000, 1304, 493, -1000, -1000, -1000, -1000, -43,
	-1000, -1000, -1000, -157, -1000, -174, 855, 1253, 942, 785,
	-1000, -1000, -187, 1235, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1870, 28, 57, 1868, 1867, 1866, 1865, 1864, 1862,
	1861, 1848, 1847, 1846, 1845, 1840, 1838, 1837, 1835, 96,
	1832, 1831, 1830, 68, 1829, 1827, 1826, 1825, 64, 122,
	86, 92, 766, 38, 37, 41, 51, 1824, 25, 1823,
	1822, 49, 1821, 39, 1819, 1818, 320, 1816, 1815, 5,
	30, 69, 95, 1813, 1808, 90, 1320, 1806, 1803, 74,
	1796, 1795, 78, 11, 4, 7, 6, 1794, 382, 1,
	1792, 82, 1791, 1790, 1788, 1783, 27, 1781, 54, 61,
	14, 53, 1779, 16, 65, 42, 19, 10, 2, 46,
	20, 1778, 15, 34, 21, 1776, 58, 1775, 108, 48,
	60, 75, 0, 24, 83, 1774, 1771, 1767, 79, 76,
	23, 9, 1765, 1762, 1761, 63, 85, 45, 87, 84,
	1754, 81, 1753, 1752, 1750, 1749, 1747, 1764, 799, 109,
	72, 29, 1742, 1739, 80, 340, 345, 71, 341, 1446,
	70, 1738, 1737, 1736, 1735, 100, 1731, 62, 97, 26,
	454, 1727, 1726, 1723, 1721, 1719, 1717, 1716, 99, 1714,
	77, 47, 52, 295, 43, 1712, 1711, 1710, 1708, 66,
	1706, 1705, 1704, 73, 1703, 1702, 94, 59, 107, 101,
	105, 1701, 1700, 91, 104, 106, 1699, 88, 40, 22,
	89, 1695, 50, 1694, 1692, 1690, 8, 3, 1689, 1688,
	1683, 1682, 1681, 1680, 55, 1677, 93, 1676, 13, 1675,
	1672, 44, 1671, 1669, 1668, 1666, 1661, 482, 620, 1660,
	67, 126, 1654, 146,
}

var yyR1 = [...]uint8{
	0, 213, 214, 214, 1, 1, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	216, 216, 2, 2, 3, 4, 4, 5, 5, 6,
	6, 22, 22, 7, 8, 8, 8, 219, 219, 41,
	41, 85, 85, 9, 9, 9, 9, 10, 10, 193,
	193, 192, 194, 194, 11, 11, 11, 11, 11, 186,
	186, 186, 186, 186, 12, 12, 189, 189, 189, 13,
	13, 13, 90, 90, 94, 94, 94, 95, 95, 95,
	95, 205, 205, 114, 114, 215, 215, 220, 220, 220,
	220, 220, 220, 220, 184, 184, 184, 184, 185, 185,
	185, 185, 187, 187, 188, 188, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 191, 191, 100, 100,
	167, 167, 167, 168, 168, 168, 168, 168, 168, 170,
	170, 171, 171, 106, 106, 172, 172, 18, 152, 153,
	153, 153, 153, 153, 153, 153, 153, 139, 139, 139,
	117, 117, 117, 117, 117, 117, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 178, 178, 178, 178, 178,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 180,
	181, 182, 174, 174, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 129, 129,
	129, 129, 129, 129, 173, 173, 169, 169, 169, 169,
	121, 121, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 125,
	125, 122, 122, 122, 122, 122, 122, 122, 122, 118,
	118, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 126, 126, 124, 124, 124, 124, 124,
	124, 124, 124, 138, 138, 127, 127, 136, 136, 137,
	137, 137, 128, 128, 128, 135, 135, 135, 132, 132,
	133, 133, 134, 134, 134, 130, 130, 130, 131, 131,
	131, 141, 163, 163, 163, 165, 165, 166, 166, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	151, 151, 183, 183, 162, 162, 162, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 150, 150, 160, 160,
	161, 161, 158, 158, 158, 159, 145, 145, 145, 145,
	145, 146, 146, 147, 147, 147, 147, 142, 142, 143,
	143, 144, 144, 176, 176, 176, 209, 209, 209, 209,
	209, 209, 210, 210, 177, 177, 148, 148, 149, 149,
	156, 156, 156, 156, 221, 221, 154, 154, 154, 155,
	155, 155, 222, 19, 20, 20, 21, 21, 21, 25,
	25, 25, 23, 23, 24, 24, 30, 30, 29, 29,
	31, 31, 31, 31, 105, 105, 105, 104, 104, 206,
	206, 206, 206, 206, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 196, 196, 195, 195, 197, 197, 197,
	197, 197, 197, 48, 48, 83, 83, 83, 86, 86,
	37, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	112, 112, 111, 111, 111, 110, 110, 42, 42, 42,
	44, 43, 43, 43, 43, 45, 45, 47, 47, 46,
	46, 49, 49, 49, 49, 50, 50, 84, 84, 32,
	32, 32, 32, 32, 32, 32, 97, 97, 52, 52,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 61, 61, 61, 61, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	28, 28, 62, 62, 62, 68, 63, 63, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 59, 59, 59, 59, 59,
	59, 59, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 223, 223, 60, 60, 60, 60, 26,
	26, 26, 26, 26, 113, 113, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 116, 116, 116, 116, 116, 72, 72, 27, 27,
	70, 70, 71, 99, 99, 73, 73, 69, 69, 69,
	198, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 74, 74, 75, 75, 207, 207, 208, 76, 76,
	77, 77, 78, 79, 79, 79, 80, 80, 80, 80,
	81, 81, 81, 54, 54, 54, 54, 54, 54, 82,
	82, 82, 82, 87, 87, 64, 64, 66, 66, 65,
	67, 88, 88, 92, 89, 89, 93, 93, 93, 93,
	93, 16, 17, 91, 91, 91, 107, 107, 107, 98,
	98, 96, 96, 102, 103, 103, 103, 103, 108, 108,
	109, 109, 199, 199, 199, 200, 200, 200, 201, 201,
	202, 203, 203, 204, 212, 212, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 217, 218,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 2, 13, 12, 14,
	12, 13, 12, 7, 10, 7, 11, 11, 9, 13,
	16, 5, 8, 11, 13, 13, 14, 14, 6, 7,
	1, 1, 4, 6, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 1, 1, 1,
	3, 0, 4, 3, 4, 5, 4, 2, 6, 1,
	3, 2, 0, 1, 2, 2, 2, 3, 5, 0,
	2, 2, 2, 2, 3, 5, 1, 2, 3, 7,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 0, 3, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 4, 0, 3,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 4, 4, 0,
	1, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 2, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 6, 6, 8, 8,
	5, 8, 7, 4, 0, 2, 4, 6, 2, 4,
	2, 1, 1, 1, 2, 1, 1, 1, 3, 1,
	2, 1, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 2, 2, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 4, 5, 4, 4, 4, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 11, 1, 1, 2, 2, 10, 8, 9,
	7, 7, 5, 0, 1, 1, 0, 1, 1, 1,
	2, 2, 1, 2, 0, 3, 0, 1, 1, 3,
	0, 4, 1, 3, 2, 1, 1, 2, 1, 1,
	1, 1, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	3, 6, 4, 7, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 0, 4, 1, 3, 1, 1, 1,
	1, 1, 1, 4, 8, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 4, 4, 4, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 2, 1, 4, 5, 5, 5, 5,
	6, 4, 4, 4, 6, 6, 6, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 9, 7, 5, 4,
	4, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 2, 2, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 0, 2, 1, 3, 5,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 2, 1, 3, 1, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 5,
	3, 1, 3, 1, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 2, 0, 2, 2, 0, 1,
	4, 1, 3, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -213, -1, -14, -15, -18, 124, 125, -214, 379,
	-152, 58, -209, -210, -172, 133, 146, 164, 165, 351,
	131, 363, 364, 148, 366, 78, -96, 136, -153, -139,
	-102, 63, 36, 61, 132, 132, 134, 204, 134, -102,
	-102, 137, -46, -108, 61, 63, 131, -98, 137, 366,
	363, 364, 331, 131, 60, 59, -140, -117, -121, -118,
	-123, -122, -124, -102, -119, -120, 240, 343, 237, 241,
	238, 243, 244, 245, 118, 242, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 246, 258, 33,
	153, 230, 231, 232, 235, 234, 236, 233, 259, 260,
	261, 262, 263, 264, 265, 266, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 225, 226,
	227, 229, 228, -140, -140, -102, 56, 203, -102, -98,
	205, -98, 56, -184, 56, 19, 184, 185, 197, 80,
	25, 121, -98, -46, 80, -46, 295, -156, -221, 346,
	37, -139, -141, -145, -142, -143, -144, -157, -146, 140,
	138, 148, 377, 142, 143, -150, 144, 132, 149, 73,
	80, -178, 140, -181, 56, 274, 280, 138, 149, 148,
	377, 71, 141, 25, 353, 355, 31, 32, -134, 380,
	268, -132, 277, -127, 58, -127, -126, 239, -128, 58,
	-127, -128, -127, -128, -130, 241, -130, -130, -130, -130,
	58, 58, -127, -127, -127, -127, -127, -136, 58, -125,
	224, -136, -137, 58, -137, 56, 57, -46, -102, 56,
	-46, -205, 374, 375, -46, -46, -187, -185, 8, 9,
	10, -46, 198, 26, -117, -109, -108, -101, 129, 185,
	354, 79, 25, 27, 274, 280, 184, 82, 118, 16,
	83, 191, 363, 364, 117, 332, 124, 52, 324, 325,
	322, 189, 334, 335, 323, 281, 196, 20, 31, 374,
	10, 28, 151, 24, 111, 126, 186, 86, 87, 154,
	26, 152, 75, 192, 194, 19, 55, 144, 11, 353,
	13, 14, 368, 355, 137, 136, 98, 367, 132, 50,
	8, 120, 29, 375, 95, 46, 149, 195, 48, 96,
	17, 326, 327, 34, 341, 158, 113, 53, 40, 369,
	80, 370, 73, 56, 295, 190, 78, 15, 51, 159,
	371, 146, 193, 97, 127, 331, 49, 187, 372, 130,
	188, 6, 337, 33, 150, 47, 131, 282, 85, 135,
	74, 165, 5, 148, 9, 54, 57, 328, 329, 330,
	38, 84, 12, 147, 345, 76, -46, 26, 129, -46,
	-154, 59, -103, 71, -102, 288, 145, -101, 36, 58,
	-177, 56, 80, -148, -102, 149, -150, 61, 132, -176,
	363, 364, -217, 58, -150, -150, 61, 61, 149, 73,
	19, -102, 9, 149, 149, -177, 63, -46, 58, -174,
	354, 16, 58, -179, 58, -180, 63, 64, 65, 66,
	73, -129, 72, -52, 269, -59, 322, 325, 324, 270,
	74, 75, -102, 340, 339, -108, 61, -182, 65, 381,
	-133, 278, 65, -130, -127, -130, 65, 61, -130, -130,
	-131, 118, 117, 33, -131, -131, -131, -131, -138, 63,
	-138, -135, 345, 346, -135, 65, -136, 65, -46, -102,
	58, 56, -46, 25, 134, 25, -167, 25, 56, 59,
	198, -184, -102, 57, -106, 140, -145, 148, 129, 88,
	-103, -221, -161, -158, -102, 149, 10, 9, 19, 144,
	138, 148, 377, -176, 61, 58, -32, -51, 80, -56,
	31, 26, -55, -52, -69, -198, -67, -68, 118, 119,
	107, 108, 115, 81, 120, -59, -57, -58, -60, -201,
	175, 63, 64, -102, 62, 72, 65, 66, 67, 68,
	73, -108, 300, -65, -217, 48, 49, 332, 333, 334,
	335, 341, 336, 83, 38, 40, 246, 269, 270, 322,
	330, 329, 328, 326, 327, 324, 325, 376, 137, 323,
	113, 331, 267, 61, 61, -176, 148, -148, -102, 365,
	-178, 377, -129, -217, 58, -32, 25, 31, 65, -179,
	58, -180, -169, 376, -169, -217, -127, 58, -127, 58,
	58, -217, -217, -217, 121, 60, -131, -130, -131, 60,
	60, -131, -131, 61, 61, 118, 60, 59, 60, 230,
	230, 59, 60, 59, 58, 57, 56, -160, -161, -59,
	-102, -46, 58, -2, -3, -4, 6, -217, -98, -2,
	-168, 19, 172, 173, -46, -185, -83, -102, 149, -187,
	-184, -102, -216, 132, 149, -102, 140, -145, -155, -103,
	63, 65, 60, 59, -127, -159, 272, -127, -147, 168,
	169, 33, 170, -147, 365, 149, 149, -176, -217, 58,
	-161, -218, 79, 78, 95, 60, -32, -53, 98, 80,
	96, 97, 82, 104, 103, 114, 107, 108, 109, 110,
	111, 112, 113, 105, 106, 376, 88, 89, 90, 91,
	92, 93, 94, 99, 100, 101, 102, -97, -217, -68,
	-217, 122, 123, -56, -56, -56, -56, -56, -56, -56,
	-202, 268, -169, 63, 121, 121, -2, -63, -32, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -72, -32,
	-217, 41, -217, -217, -217, -223, -217, -223, -223, -223,
	-223, -223, -223, -223, -116, 118, 241, 153, 232, -119,
	-118, 247, 246, -217, -217, -217, -217, -176, 58, -177,
	-32, -83, 60, 58, 355, 59, 60, -179, 63, 60,
	271, 120, -117, -218, 60, 60, 60, -30, 24, -29,
	-63, -31, -32, 109, -108, -29, -32, -29, -103, -131,
	-130, 63, -130, 279, 279, 65, 65, -160, -102, -46,
	60, 58, 58, -83, -76, 15, -21, 5, -19, -222,
	-2, -46, 135, 21, 6, 8, 9, 10, 19, -100,
	59, 25, -187, -215, 58, -102, 148, -102, -163, -165,
	345, -164, 57, 145, 71, 177, 178, 179, 180, 181,
	182, 183, -158, -79, 27, 28, -177, 56, 73, 171,
	-177, 56, -148, -176, 58, -32, -161, 60, -173, 170,
	-32, -32, -61, 73, 80, 74, 75, -56, 21, 22,
	23, -62, -65, -68, 69, 98, 96, 97, 82, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, -56, -56, -121, 231, -116, -119, 61, -55,
	63, -102, -55, -102, 380, -103, -109, -101, -103, -218,
	59, -218, -2, -29, -29, -32, -115, 118, 237, 153,
	232, 226, 256, 257, 276, 230, 277, 219, 211, 216,
	229, 227, 213, 228, 212, 225, 222, 235, 234, 236,
	247, 238, 243, 245, 244, 242, -32, -31, -31, -29,
	-23, 24, -70, -71, 84, -69, -102, -108, 19, -218,
	-218, -218, -218, 239, -29, -30, -29, -29, -29, -149,
	-102, -217, -218, 60, 351, 352, -32, 58, 65, 60,
	-134, -218, -29, 59, -218, -218, -105, -104, 25, -102,
	63, 121, -218, -218, -217, -131, -131, 60, 60, 60,
	58, 58, -84, 367, -160, 60, -80, 17, 16, -5,
	-3, -217, 21, 24, -25, 44, 45, -20, -218, 25,
	-149, 186, -99, 84, -102, -188, -190, -6, -8, -7,
	-10, -9, -11, -12, -13, -16, -3, -22, 10, 9,
	20, 33, 190, 191, 196, 192, 147, 137, -17, 8,
	331, 56, -220, -102, 107, 88, 63, -139, 59, 58,
	58, 363, 364, 138, -162, 56, -164, 345, 58, 347,
	61, -151, 88, 63, 88, 88, 88, 88, 88, 88,
	88, 9, 10, 58, 58, -161, -218, 60, -163, 338,
	73, 74, 75, -56, -56, -56, -62, -56, -56, -56,
	-28, 154, 79, 345, -218, -203, -204, 63, 121, -32,
	-218, -218, -218, 59, 57, 59, -127, -127, -127, -137,
	217, -127, 217, -137, -127, -127, -127, -127, -127, -127,
	25, 59, 11, 59, 11, -218, -29, -73, -71, 86,
	-32, -218, 121, -108, -218, -218, -218, -218, 60, 59,
	-32, -173, 56, 60, -175, 60, 60, -218, -31, -206,
	378, -104, 109, -109, -206, -206, -30, -84, -160, -161,
	-50, 12, 58, 60, -50, -81, 19, 34, -32, -77,
	-78, -32, -76, -2, -23, 70, -2, -170, 57, 187,
	206, -32, -190, -76, -19, -19, -19, -193, -102, -192,
	-19, -212, -211, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, -102, -102, -102, -186, 40, 193,
	194, 195, -51, -56, -32, -51, -46, 60, -220, -102,
	-220, -220, -220, -220, -220, -161, -161, 58, 58, 149,
	-102, -166, -164, -102, 65, -183, 56, 76, 65, -183,
	-183, -183, -183, -183, -147, -147, -149, -161, 60, -173,
	-163, -162, -28, 79, -56, -56, 230, 381, 59, -169,
	-103, -115, 118, -113, 61, 63, -32, -130, 61, -115,
	-56, -56, -56, -56, 342, -76, 87, -32, 85, -103,
	141, -102, -218, 10, 9, 351, 352, 60, 207, 357,
	358, 158, 359, 170, 360, 361, -217, 121, -218, -50,
	60, 60, -163, -32, -83, -84, -163, 9, 98, 59,
	18, 59, -79, -80, -218, -24, 47, -171, 345, -32,
	-191, -190, 206, -189, -190, -80, -96, 11, -41, -46,
	-34, -35, -36, -37, -48, -68, -217, -46, 59, -194,
	-117, 188, -89, -114, 208, -93, 290, 289, -103, 300,
	-91, 288, 241, 287, -183, 59, -102, 11, 11, 11,
	11, -190, 206, 85, 206, -100, 19, 60, 60, -161,
	-161, 58, -217, 60, 59, -177, -177, 60, 60, -163,
	-162, -56, 279, -204, -218, -218, -218, -218, -218, 59,
	-218, 19, -218, 59, -218, 19, -217, -27, 337, -32,
	-46, -173, -147, -147, 345, 65, 16, 65, 65, 65,
	65, 358, 158, 360, 16, -218, 159, -76, 109, -163,
	-50, -163, -162, 60, -50, -162, 42, -32, -32, -78,
	-81, -29, 377, -190, 379, -190, -81, -47, 29, -46,
	-46, -41, -219, 59, 11, 57, 33, 59, -42, -44,
	-43, -45, 46, 50, 52, 47, 48, 49, 53, -112,
	25, -34, -217, -111, 159, -110, 25, -108, 63, -192,
	-102, 189, 59, -89, 208, -90, -94, 291, 293, 88,
	121, -107, -102, 63, 31, 33, -211, 29, -189, -188,
	-189, -99, 186, -199, 199, 80, 60, 60, -161, -102,
	-164, 141, -163, -162, -56, -56, -56, -56, -56, -218,
	63, 58, 65, 65, 362, -108, 16, -218, -162, -163,
	-163, 43, -33, 11, -32, 379, 87, -190, -85, 159,
	-46, -85, 57, -34, -46, -88, -92, -69, -35, -36,
	-36, -35, -36, 46, 46, 46, 51, 46, 51, 46,
	-43, -108, -218, -49, 54, 136, 55, -217, -110, 19,
	-93, -90, 59, 292, 294, 295, 56, 76, -32, -103,
	-131, -102, 87, 379, 379, 87, 206, 187, -200, 200,
	199, -163, -163, 60, -218, -46, -162, -218, -218, -218,
	-218, -26, 98, 345, -149, 121, -207, -208, -32, -162,
	-50, -34, 87, -54, 33, 38, -2, -217, -217, -50,
	-34, -50, -33, 59, 88, -39, -38, 56, 57, -40,
	56, -38, 46, 46, -196, 345, 132, 132, 132, -86,
	-102, -2, -94, -95, 296, 293, 299, 88, 87, 86,
	-189, 202, 201, -162, -162, 58, -218, 343, 53, 348,
	60, -103, -218, -76, 59, -74, 13, -87, 56, -88,
	-64, -66, -65, -217, -2, -82, -102, -86, -76, -50,
	-50, -92, -32, -32, 58, -32, 58, -217, -217, -217,
	-218, 59, 293, 297, 298, -32, 137, 206, 379, -149,
	43, 344, 349, -218, -208, -75, 14, 16, 30, -87,
	59, -218, -218, -218, 59, 121, -218, -80, -76, -83,
	-195, -197, 368, 369, 370, 371, 372, 373, -83, -83,
	-83, -111, -102, -189, 87, 60, 43, -32, -63, 149,
	-66, 38, -2, -217, -102, -102, -80, 60, 60, 59,
	-218, -218, -218, -49, 87, 345, 9, -64, -2, 121,
	-197, -196, 348, -88, -218, -102, 349,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 0, -2, 781, 1, 3,
	6, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	779, 397, 398, 399, 402, 0, 0, 782, 0, 150,
	194, 194, 194, 783, 0, 0, 779, 0, 779, 0,
	0, 0, 0, 509, 788, 789, 779, 0, 0, 403,
	400, 401, 146, 0, 410, 0, 157, 322, 318, 161,
	162, 163, 164, 165, 305, 241, 269, 270, 305, 293,
	312, 305, 312, 276, 305, 312, 325, 325, 325, 325,
	325, 284, 285, 286, 287, 288, 289, 290, 0, 0,
	261, 305, 305, 305, 305, 305, 267, 268, 295, 296,
	297, 298, 299, 300, 301, 302, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 307, 259, 307, 309,
	309, 257, 258, 158, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 148, 412, 0,
	415, 151, 152, 153, 154, 155, 156, 0, 404, 406,
	0, 393, 0, 0, 0, 0, 0, 366, 367, 167,
	0, 169, 0, 171, 0, 173, 174, 0, 176, 178,
	404, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	324, 320, 319, 240, 0, 325, 305, 294, 325, 0,
	325, 325, 277, 278, 328, 0, 328, 328, 328, 328,
	0, 0, 315, 315, 264, 265, 266, 252, 0, 307,
	260, 254, 255, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 0, 130, 0, 112, 108, 109,
	110, 0, 107, 0, 21, 510, 790, 791, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 0, 780, 143, 0,
	0, 0, 416, 418, 784, 785, 786, 787, 414, 0,
	376, 0, 0, 0, 407, 357, 0, 362, -2, 0,
	394, 395, 798, 955, 0, 0, 360, 393, 406, 168,
	0, 0, 0, 175, 177, 0, 181, 182, 798, 0,
	212, 0, 0, 195, 0, 198, -2, 201, 202, 203,
	236, 205, 206, 207, 0, 209, 305, 305, 232, 0,
	528, 529, 0, 0, 0, 0, -2, 210, 211, 323,
	160, 321, 0, 328, 325, 328, 0, 0, 328, 328,
	279, 329, 0, 0, 280, 281, 282, 283, 0, 303,
	0, 262, 0, 0, 263, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 779, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 28, 144, 0, 0,
	417, 413, 0, 370, 305, 305, 0, 0, 0, 0,
	0, 393, 0, 0, 361, 0, 0, 519, 798, 524,
	526, 0, 568, 569, 570, 571, 572, 573, 798, 798,
	798, 798, 798, 798, 798, 599, 600, 601, 602, 0,
	604, -2, 712, 707, 714, 715, 716, 717, 718, 719,
	720, 0, 0, 760, 798, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 643,
	643, 643, 643, 643, 643, 643, 643, 0, 0, 0,
	0, 0, 799, 358, 359, 364, 393, 0, 407, 193,
	170, 404, 172, 798, 0, 0, 0, 213, 0, 0,
	0, 0, 200, 0, 204, 0, 228, 0, 230, 0,
	0, -2, 798, 798, 0, 306, 271, 328, 273, 313,
	314, 274, 275, 330, 326, 327, 325, 0, 325, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 368, 369,
	305, 0, 0, -2, 728, 0, 422, 0, 0, -2,
	0, 0, 131, 132, 128, 113, 111, 475, 476, 0,
	0, 95, 0, 30, 31, 407, 406, 29, 411, 419,
	420, 421, 332, 0, 733, 374, 375, 373, 404, 383,
	384, 0, 0, 404, 405, 406, 393, 0, 798, 0,
	0, 234, 798, 798, 0, 956, 522, 798, 0, 0,
	798, 798, 798, 798, 798, 798, 798, 798, 798, 798,
	798, 798, 798, 798, 798, 0, 549, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 525, 0, 542,
	0, 0, 0, 590, 591, 592, 593, 594, 595, 596,
	603, 0, 711, 713, 0, 0, 35, 0, 566, 798,
	798, 798, 798, 798, 798, 798, 798, 432, 0, 697,
	0, 0, 0, 0, 0, 634, 0, 635, 636, 637,
	638, 639, 640, 641, 642, 688, 0, 690, 691, 692,
	693, 694, 695, 798, -2, 798, 798, 365, 0, 0,
	0, 0, 0, 798, 190, 0, 196, 0, 236, 199,
	237, 238, 322, 208, 229, 231, 233, 0, 798, 0,
	0, 438, 444, 440, 0, 0, 444, 0, 0, 272,
	328, 304, 328, 316, 317, 0, 0, 0, 0, 0,
	517, 955, 0, 0, 736, 0, 0, 426, 429, 424,
	35, 0, 0, 134, 135, 136, 137, 138, 0, 703,
	0, 0, 0, 22, 97, 0, 0, 407, 354, 333,
	0, 335, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 734, 735, 377, 0, 385, 386,
	378, 0, 0, 0, 0, 0, 0, 332, 392, 0,
	520, 521, 523, 543, 0, 545, 547, 530, 798, 798,
	798, 534, 562, 563, 564, 0, 798, 798, 798, 560,
	538, 0, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 588, 0, 598, 305, 0, 586,
	236, 0, 587, 597, 0, 708, 0, -2, 710, 565,
	798, 759, 35, 0, 0, 0, 0, -2, 305, 659,
	305, 309, 662, 663, 664, 305, 667, 669, 670, 671,
	672, 309, 674, 675, 676, 677, 678, 305, 305, 681,
	682, 305, 305, 685, 305, 305, 0, 0, 0, 0,
	798, 433, 705, 700, 798, 0, 707, 0, 0, 631,
	632, 633, 644, 689, 0, 0, 437, 0, 0, 0,
	408, 798, 234, 183, 186, 187, 0, 214, 0, 0,
	239, 605, 0, 798, 449, 611, 441, 445, 0, 447,
	448, 0, 449, 449, -2, 291, 292, 308, 311, 517,
	0, 0, 515, 0, 0, 515, 740, 798, 798, 728,
	37, 0, 427, 428, 432, 430, 431, 423, 36, 0,
	139, 0, 0, 798, 477, 18, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 728, 422, 422, 422,
	0, 422, 0, 0, 0, 69, 798, 798, 771, 41,
	42, 0, 0, -2, 97, 97, -2, 97, 97, 0,
	0, 0, 0, 0, 331, 0, 336, 0, 0, 0,
	339, 0, 351, 341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 332, 354, 235,
	544, 546, 548, 531, 532, 533, 535, 560, 539, 0,
	536, 798, 798, 0, 527, 0, 801, 236, 0, 567,
	-2, 612, 613, 0, 0, 798, 656, 325, 660, 661,
	665, 666, 668, 673, 679, 680, 683, 684, 686, 687,
	0, 798, 798, 798, 798, 0, 728, 0, 701, 798,
	0, 629, 0, 630, 645, 646, 647, 648, 0, 0,
	0, 179, 0, 0, 0, 192, 197, 606, 439, 607,
	0, 446, 442, 0, 608, 609, 0, 515, 0, 0,
	332, 798, 0, 517, 332, 32, 0, 0, 737, 729,
	730, 733, 736, 35, 434, 425, -2, 141, 798, 129,
	0, 704, 115, 736, 781, 0, 0, 57, 62, 59,
	0, 0, 804, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 64, 65, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 128, 96, 98, -2,
	99, 100, 101, 102, 103, 0, 0, 0, 0, 0,
	355, 0, 337, 342, 340, 343, 352, 353, 344, 345,
	346, 347, 348, 349, 404, 404, 0, 0, 332, 391,
	354, 390, 537, 798, 561, 540, 0, 800, 0, 803,
	709, 0, 305, 0, 654, 655, 0, 657, 658, 0,
	0, 0, 0, 0, 0, 698, 628, 706, 798, 708,
	0, 409, 234, 0, 0, 188, 189, 191, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 610, 332,
	515, 332, 354, 516, 0, 515, 354, 741, 0, 798,
	798, 798, 732, 740, 38, 798, 435, 16, 0, 140,
	17, 126, 0, 0, 76, 740, 0, 0, 0, 49,
	0, 456, 458, 459, 460, 490, 0, 492, 0, 0,
	61, 63, 53, 0, 0, 764, 93, 94, 0, 0,
	0, -2, 0, 775, 772, 0, 67, 70, 71, 72,
	73, 74, 0, 0, 0, 703, 0, 23, 792, 0,
	0, 0, 0, 334, 0, 379, 380, 0, 332, 354,
	388, 541, 589, 802, 614, 617, 615, 616, 618, 798,
	620, 798, 622, 798, 624, 798, 798, 0, 0, 702,
	0, 180, 184, 185, 0, 216, 0, 218, 219, 220,
	221, 222, 223, 224, 0, 450, 0, 0, 443, 354,
	332, 10, 8, 518, 332, 12, 0, 738, 739, 731,
	33, 454, 798, 0, 0, 77, 125, 51, 0, 508,
	-2, 0, 0, 0, 47, 48, 0, 0, 0, 0,
	0, 0, 497, 0, 0, 500, 0, 0, 0, 0,
	491, 0, 0, 511, 0, 493, 0, 495, 496, 60,
	0, 0, 0, 54, 0, 56, 82, 0, 0, 798,
	0, 328, 776, 777, 778, 774, 805, 0, 0, 0,
	0, 0, 0, 795, 793, 0, 332, 332, 0, 0,
	338, 0, 354, 389, 0, 0, 0, 0, 649, 627,
	699, 0, 215, 217, 226, 0, 798, 452, 7, 11,
	354, 742, 515, 0, 142, 0, 19, 78, 0, 0,
	507, 515, 0, 515, 50, 454, 761, 0, 457, 486,
	488, 0, 483, 498, 499, 501, 0, 503, 0, 505,
	506, 461, 462, 463, 0, 0, 0, 0, 494, 0,
	765, 55, 0, 0, 85, 86, 766, 767, 768, 0,
	770, 68, 75, 0, 0, 80, 0, 129, 25, 0,
	794, 354, 354, 24, 356, 0, 387, 619, 621, 623,
	625, 0, 0, 0, 0, 0, 0, 725, 727, 9,
	721, 455, 127, 753, 0, 0, -2, 0, 0, 728,
	515, 46, 515, 0, 798, 480, 487, 798, 0, 481,
	798, 482, 502, 504, 473, 0, 0, 0, 0, 0,
	478, -2, 83, 84, 0, 0, 90, 798, 0, 0,
	0, 796, 797, 26, 27, 0, 626, 0, 0, 0,
	382, 227, 451, 0, 798, 723, 0, 39, 0, 753,
	743, 755, 757, 798, 35, 0, 749, 0, 736, 45,
	728, 762, 763, 484, 0, 489, 0, 0, 0, 0,
	492, 0, 87, 88, 89, 769, 79, 0, 0, 0,
	650, 0, 653, 453, 726, 34, 798, 798, 0, 40,
	0, 758, -2, 0, 0, 0, 52, 44, 736, 0,
	0, 465, 467, 468, 469, 470, 471, 472, 0, 0,
	0, 511, 479, 0, 20, 381, 651, 724, 722, 0,
	756, 0, -2, 0, 751, 750, 43, 485, 464, 0,
	512, 513, 514, 463, 81, 0, 0, 746, 35, 0,
	466, 474, 0, 754, -2, 752, 652,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 112, 104, 3,
	58, 60, 109, 107, 59, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 379,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:406
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:411
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:420
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 7:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:425
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 8:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:445
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:465
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:486
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 11:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:502
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser/parser.y:519
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndex,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:538
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       ViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 14:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:549
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:         SqlSecurityStr,
					SecurityType: yyDollar[5].str,
					Name:         yyDollar[8].tableName.toViewName(),
					Definition:   yyDollar[10].selStmt,
				},
			}
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:561
		{
			yyVAL.statement = &DDL{
				Action: CreateView,
				View: &View{
					Type:       MaterializedViewStr,
					Name:       yyDollar[5].tableName.toViewName(),
					Definition: yyDollar[7].selStmt,
				},
			}
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:572
		{
			yyVAL.statement = &DDL{
				Action: CreatePolicy,
				Table:  yyDollar[5].tableName,
				Policy: &Policy{
					Name:       yyDollar[3].colIdent,
					Permissive: Permissive(yyDollar[6].bytes),
					Scope:      yyDollar[7].bytes,
					To:         yyDollar[9].colIdents,
					Using:      NewWhere(WhereStr, yyDollar[10].expr),
					WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
				},
			}
		}
	case 17:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:588
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      []Statement{yyDollar[11].statement},
				},
			}
		}
	case 18:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:602
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[5].tableName,
					Time:      yyDollar[6].str,
					Event:     yyDollar[7].strs,
					Body:      yyDollar[9].blockStatement,
				},
			}
		}
	case 19:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:616
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[3].colIdent,
					TableName: yyDollar[7].tableName,
					Time:      yyDollar[4].str,
					Event:     yyDollar[5].strs,
					Body:      yyDollar[11].blockStatement,
				},
			}
		}
	case 20:
		yyDollar = yyS[yypt-16 : yypt+1]
//line parser/parser.y:629
		{
			yyVAL.statement = &DDL{
				Action: CreateTrigger,
				Trigger: &Trigger{
					Name:      yyDollar[6].colIdent,
					TableName: yyDollar[10].tableName,
					Time:      yyDollar[7].str,
					Event:     yyDollar[8].strs,
					Body:      yyDollar[14].blockStatement,
				},
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:643
		{
			yyVAL.statement = &DDL{
				Action: CreateType,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreateTable, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 23:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:660
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 24:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:674
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKey,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:688
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 26:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:708
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  true,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 27:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser/parser.y:726
		{
			yyVAL.statement = &DDL{
				Action:  AddIndex,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					Clustered:  false,
					Options:    yyDollar[13].indexOptions,
					Partition:  yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:744
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:753
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKey,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:768
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:776
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:783
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:789
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:793
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:799
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:803
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:810
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:822
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:834
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:838
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:844
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, From: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:850
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:854
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:858
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:863
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:864
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:877
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:881
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:887
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:891
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:895
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:899
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:905
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:909
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:922
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:926
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:932
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:947
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:954
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:961
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:968
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:976
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:986
		{
			yyVAL.str = ""
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:990
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1008
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1015
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1025
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1029
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1033
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[3].statement)
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1040
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1049
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1057
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1068
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1072
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1078
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1082
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1086
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1092
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1100
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1104
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1120
		{
			yyVAL.str = SessionStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1124
		{
			yyVAL.str = GlobalStr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1129
		{
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1130
		{
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1134
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1135
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1136
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1137
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1138
		{
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1139
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1140
		{
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1181
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1185
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1191
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1195
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1201
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1213
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1225
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1232
		{
			yyVAL.empty = struct{}{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1234
		{
			yyVAL.empty = struct{}{}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1237
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1241
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1245
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1250
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1254
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1258
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1262
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1266
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1270
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1275
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1284
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1288
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1293
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1297
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1302
		{
			yyVAL.bytes = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1306
		{
			yyVAL.bytes = nil
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.ddl = &DDL{Action: CreateTable, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1319
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1325
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1329
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.addColumn(yyDollar[1].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1334
		{
			yyVAL.TableSpec.addColumn(yyDollar[3].columnDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1338
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1342
		{
			yyVAL.TableSpec.addForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1346
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1350
		{
			yyVAL.TableSpec.addIndex(yyDollar[3].indexDefinition)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1354
		{
			yyVAL.TableSpec.addCheck(yyDollar[3].checkDefinition)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1360
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1365
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1370
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1376
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1393
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1406
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1411
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1416
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ValueOrExpression: yyDollar[2].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1421
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, ValueOrExpression: yyDollar[4].defaultValueOrExpression}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1427
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1432
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1437
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1442
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1447
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1452
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1457
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1462
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1467
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1476
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1486
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1491
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1496
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1503
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:1510
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1518
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1523
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[4].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1528
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1533
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1539
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1545
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:1551
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1558
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1564
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1570
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1574
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[3].optVal}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1578
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Value: yyDollar[4].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1582
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[2].expr}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1586
		{
			yyVAL.defaultValueOrExpression = DefaultValueOrExpression{Expr: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1592
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1596
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1600
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1604
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1608
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1612
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1616
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1620
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1624
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1630
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1636
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1642
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1652
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1657
		{
			yyVAL.sequence = &Sequence{}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1661
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1666
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1671
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1676
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1681
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1686
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1691
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1696
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1701
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1706
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1711
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1716
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1721
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1728
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1732
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1736
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1740
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1744
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1748
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1753
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1757
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1762
		{
			yyVAL.bytes = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1771
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.DisplayWidth = yyDollar[2].optVal
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1776
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1863
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1867
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + yyDollar[2].str, Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2007
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2011
		{
			yyVAL.str = " " + string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2051
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2056
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2061
		{
			yyVAL.optVal = nil
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2065
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2070
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2074
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2082
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2086
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2092
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2100
		{
			yyVAL.optVal = nil
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2104
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2108
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2117
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2121
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2130
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2134
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2139
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2143
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2148
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2152
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2156
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2161
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2165
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2169
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2174
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2178
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2182
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2188
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2193
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2197
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2201
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2207
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2211
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2217
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2221
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2227
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2231
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2236
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2240
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2244
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2248
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2252
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2256
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2260
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2264
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2268
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2274
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2284
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2288
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2294
		{
			yyVAL.indexPartition = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2298
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2302
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2308
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2312
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2316
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2320
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2324
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2328
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2332
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2336
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2340
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2346
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2356
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2361
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2367
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2371
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2377
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2382
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2386
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2396
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2401
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2408
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2415
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2422
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser/parser.y:2431
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 382:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser/parser.y:2442
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				IndexName:        yyDollar[3].colIdent,
				IndexColumns:     yyDollar[5].colIdents,
				ReferenceName:    yyDollar[8].tableName,
				ReferenceColumns: yyDollar[10].colIdents,
			}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2453
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2457
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2461
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2465
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 387:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser/parser.y:2471
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2481
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Primary: true, Unique: true, Clustered: yyDollar[3].boolVal},
				Columns:   yyDollar[5].indexColumns,
				Options:   yyDollar[7].indexOptions,
				Partition: yyDollar[8].indexPartition,
			}
		}
	case 389:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:2492
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes), Name: yyDollar[2].colIdent, Primary: false, Unique: true, Clustered: yyDollar[4].boolVal},
				Columns:   yyDollar[6].indexColumns,
				Options:   yyDollar[8].indexOptions,
				Partition: yyDollar[9].indexPartition,
			}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2502
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[1].bytes), Primary: false, Unique: true, Clustered: yyDollar[2].boolVal},
				Columns:   yyDollar[4].indexColumns,
				Options:   yyDollar[6].indexOptions,
				Partition: yyDollar[7].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2513
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2522
		{
			yyVAL.checkDefinition = &CheckDefinition{
				Where:     *NewWhere(WhereStr, yyDollar[3].expr),
				NoInherit: yyDollar[5].boolVal,
			}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2531
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2535
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2545
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2549
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2553
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2557
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2561
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2565
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2571
		{
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2572
		{
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2585
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2592
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2596
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2603
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2607
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2613
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2617
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2622
		{
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2623
		{
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2627
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2631
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2641
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2645
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2654
		{
			setAllowComments(yylex, true)
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2658
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2664
		{
			yyVAL.bytes2 = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2668
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2674
		{
			yyVAL.str = UnionStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2678
		{
			yyVAL.str = UnionAllStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2682
		{
			yyVAL.str = UnionDistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2687
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2691
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2695
		{
			yyVAL.str = SQLCacheStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2700
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2704
		{
			yyVAL.str = DistinctStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2709
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2713
		{
			yyVAL.str = StraightJoinHint
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2718
		{
			yyVAL.selectExprs = nil
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2722
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2728
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2732
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2738
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2742
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2746
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:2750
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2755
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2759
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2763
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2770
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2775
		{
			yyVAL.overExpr = nil
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2779
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:2783
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2787
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 453:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:2791
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[5].partitionBy, OrderBy: yyDollar[6].orderBy}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2796
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2800
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2806
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2810
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2820
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2824
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2828
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2833
		{
			yyVAL.strs = []string{}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2837
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2843
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2847
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2879
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:2883
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2889
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2894
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2898
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2904
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2908
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2921
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2925
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2929
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:2933
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2939
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:2941
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2945
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2947
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2951
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2953
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2956
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:2961
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2965
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2969
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2976
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2982
		{
			yyVAL.str = JoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2986
		{
			yyVAL.str = JoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:2990
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:2996
		{
			yyVAL.str = StraightJoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3002
		{
			yyVAL.str = LeftJoinStr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3006
		{
			yyVAL.str = LeftJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3010
		{
			yyVAL.str = RightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3014
		{
			yyVAL.str = RightJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3020
		{
			yyVAL.str = NaturalJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3024
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3034
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3038
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3044
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3048
		{
			yyVAL.tableName = TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3053
		{
			yyVAL.indexHints = nil
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3057
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3061
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3065
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3070
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3074
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3079
		{
			yyVAL.columns = nil
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3083
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3089
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3093
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3097
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3101
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3105
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3113
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3119
		{
			yyVAL.str = ""
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3129
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3139
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3143
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, All: true}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3147
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3151
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[4].expr, Any: true}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3155
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3159
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3179
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3183
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3187
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3193
		{
			yyVAL.str = IsNullStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3197
		{
			yyVAL.str = IsNotNullStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3201
		{
			yyVAL.str = IsTrueStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3205
		{
			yyVAL.str = IsNotTrueStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3209
		{
			yyVAL.str = IsFalseStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3213
		{
			yyVAL.str = IsNotFalseStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3219
		{
			yyVAL.str = EqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3223
		{
			yyVAL.str = LessThanStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3227
		{
			yyVAL.str = GreaterThanStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3231
		{
			yyVAL.str = LessEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3235
		{
			yyVAL.str = GreaterEqualStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3239
		{
			yyVAL.str = NotEqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3243
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3247
		{
			yyVAL.str = PosixRegexStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3251
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3255
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3259
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3264
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3274
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3278
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3282
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3288
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3294
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3298
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3304
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3308
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3312
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3316
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3324
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3384
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3388
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3392
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3396
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3400
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3408
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3422
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3426
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3430
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3438
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3446
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3454
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3458
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3472
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3488
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3492
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3510
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3514
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3518
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3522
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3526
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 619:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3530
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 621:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3538
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3542
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 623:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3546
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:3550
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: nil}
		}
	case 625:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:3554
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].selectExpr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 626:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:3558
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3562
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3566
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3570
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3575
		{
			yyVAL.expr = &NextSeqValExpr{SequenceName: yyDollar[4].tableIdent}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3633
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3665
		{
			yyVAL.str = ""
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3669
		{
			yyVAL.str = BooleanModeStr
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3673
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:3677
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3681
		{
			yyVAL.str = QueryExpansionStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3691
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3723
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3727
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3731
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3845
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3849
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3862
		{
			yyVAL.expr = nil
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3866
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3871
		{
			yyVAL.str = string("")
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3875
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3881
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3885
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:3891
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3896
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3898
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3901
		{
			yyVAL.expr = nil
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3905
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3911
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3915
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:3919
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Schema: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3925
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3931
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3935
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3940
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3945
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3949
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3953
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3957
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3961
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3965
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3969
		{
			yyVAL.expr = &NullVal{}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3974
		{
			yyVAL.exprs = nil
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3978
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:3983
		{
			yyVAL.expr = nil
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:3987
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:3993
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:3997
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4003
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4008
		{
			yyVAL.orderBy = nil
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4012
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4018
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4022
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4028
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4033
		{
			yyVAL.str = AscScr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4037
		{
			yyVAL.str = AscScr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4041
		{
			yyVAL.str = DescScr
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4046
		{
			yyVAL.limit = nil
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4050
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4054
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4058
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4063
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4067
		{
			yyVAL.str = ForUpdateStr
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4071
		{
			yyVAL.str = ShareModeStr
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4084
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4088
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4092
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4097
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4101
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:4105
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4112
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4116
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4120
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4124
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4129
		{
			yyVAL.updateExprs = nil
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4133
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4139
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4143
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4149
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4153
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4159
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4165
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4175
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4179
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4185
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4191
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4195
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4201
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4205
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4209
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:4214
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4218
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4224
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4230
		{
			yyVAL.statement = &SetBoolOption{OptionNames: yyDollar[2].strs, Value: yyDollar[3].optVal}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4237
		{
			yyVAL.bytes = []byte("charset")
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4244
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4248
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4252
		{
			yyVAL.expr = &Default{}
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4257
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4259
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4262
		{
			yyVAL.str = ""
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4264
		{
			yyVAL.str = IgnoreStr
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4268
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4275
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4279
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4283
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4289
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4294
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4301
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4307
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4311
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4315
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4321
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4325
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4329
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:4335
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4339
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:4346
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4353
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4357
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:4364
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4370
		{
			yyVAL.strs = []string{string(yyDollar[1].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:4374
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].bytes))
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4540
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:4549
		{
			decNesting(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
